#+TITLE:Agenda - DSC 105
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Agenda - DSC 105 - Introduction to Data Science, Fall 2022
#+STARTUP:overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :exports both :results output :session *R*
#+OPTIONS: toc:nil num:nil ^:nil
* README

- DSC 105 covers the basics of data science with R, simple
  visualization and productivity tools
- We use R as a language, GNU Emacs as editor, ESS as statistics
  extension, and Org-mode for [[http://www.literateprogramming.com/][literate programming]]
- For details on objectives, audience, grading, schedule, check the
  [[https://github.com/birkenkrahe/ds1/blob/piHome/org/syllabus.org][syllabus]] or the [[https://github.com/birkenkrahe/org/blob/master/FAQ.org][FAQ]] on GitHub.
- This file contains a (dynamically updated) agenda for each session
  as well as some content.
- You can also look at [[https://github.com/birkenkrahe/ds1/blob/piHome/org/agenda.org][the agenda on GitHub]].

* FAQ - Frequently Asked Questions

#+attr_html: :width 600px
#+caption: Three Spheres II, M.C. Escher (1946)
[[../img/escher.jpg]]

- [[https://github.com/birkenkrahe/org/blob/master/FAQ.org][Frequently Asked Questions @GitHub]]
- First place to go to with a general question
- FAQ is regularly updated with new content

* Week 1: Introduction to the course
** Objectives

- [X] Mutual introductions
- [X] Review: prerequisites (see email from July 18)
- [X] Review: Entry test
- [X] Lecture: Course overview
- [X] Practice: course infrastructure
- [X] First assignments and tests
- [ ] [[file:1_overview.org][Glossary]]

** Prerequisites
#+attr_html: :width 400px
#+caption:
[[../img/beatles.jpeg]]

#+begin_quote
"In DSC 105 (Introduction to data science), we'll start with R from
scratch - no need to prepare unless you want to. If you already took
DSC 101 in fall 2021, you do not need to take this course. If you took
DSC 205 in spring 2022, you will experience some repetition. Textbook:
Book of R, Part I (ch. 1-8), by T D Davies (NoStarch, 2016)."
#+end_quote

- General preparation: [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-prepare-for-your-data-science-classes][see the FAQ]] - R, Emacs + ESS + Org-mode

#+begin_notes
In London in 1962, the Beatles failed a major audition with music
producers, who committed a Type II statistical error: their null
hypothesis was that guitar groups are no longer popular, and should
have been rejected.
#+end_notes

** Assignments for next week

- By Monday Aug 22, 11 am: [[https://lyon.instructure.com/courses/568/assignments/1609/edit?quiz_lti][Test 1 (Course infrastructure)]] - you
  complete this 5-question quiz in Canvas.

- By Monday Aug 22, 11 am: [[https://lyon.instructure.com/courses/568/assignments/1420][Introduction to data science (DataCamp)]] -
  you have to register with DataCamp and join the Lyon fall '22 group.

- By Wednesday Aug 24, 11 am: Enter a project idea and team member
  names, and your question(s) [[https://lyon.instructure.com/courses/568/pages/enter-your-project-idea-and-participants-here][in this table in Canvas]].

- By Friday Aug 26, 11 am: [[https://lyon.instructure.com/courses/568/assignments/1436][GNU Emacs online tutorial]] - you need to
  alter, save and submit the tutorial in Canvas. You should also get
  Emacs + ESS for your PC.

- For general questions, you can use the Google chat for this course
  (invitation only)

- Get the mobile app! (Canvas student)

  #+attr_html: :width 300px
  [[../img/mobile.png]]

** Practice - course infrastructure

*IF YOU ALREADY DID THIS IN ANOTHER CLASS: FINISH THE EMACS TUTORIAL!*

*Useful:* take notes! Practice leads to mastery and the practice
nexercises will often come back to haunt you in the tests.

1) Open a browser
2) Find the GitHub repos (birkenkrahe/dviz and /org)
3) Open the command line terminal
4) Open/close R
5) Open Emacs
6) Find the Emacs tutorial
7) Open/close R inside Emacs
8) Run R in an Org-mode file
9) Close Emacs
10) Close the command line terminal

Note: Class room practice completion = 10 points each for active
participation (if there's a practice file, you can make up).

([[https://github.com/birkenkrahe/ds1/blob/piHome/org/1_practice.org][Link to practice file in GitHub]])

* Week 2: Getting started

-*START BBB RECORDING*-

- [X] Quiz 1: course infrastructure
- [X] Team projects: getting ready for 1st sprint review
- [X] Lecture: Introduction to data science
- [X] Lecture/practice: Introduction to R
- [X] Practice: Running R in an Emacs Org-mode file
- [X] Practice: Introduction to R

** DONE Home assignments - how they work
#+attr_html: :width 400px
#+captions: course infrastructure
[[../img/platforms.png]]

- Assignment is posted on [[https://lyon.instructure.com/courses/568/assignments/1435][Canvas]] (includes the link)
- Assignment must be completed on time on [[https://app.datacamp.com/groups/lyon-college-data-science-fall-2022/assignments][DataCamp]]
- You loose 1 point for every day of late submission
- Canvas Gradebook is updated manually (with some delay)

** DONE Team projects - check in
#+attr_html: :width 600px
[[../img/scrum.jpg]]

- Course has grown to 15 participants!
- You'll have to do the project in a team - 2 to 3 people
- I can only accommodate at most 9 projects (last week of term)
- Put your team/ideas into this table ([[https://lyon.instructure.com/courses/568/pages/enter-your-project-idea-and-participants-here][Canvas]]) by Wednesday

- [X] *Who has not yet found a team?*
- [X] *Who has a team but no idea what to do?*

** DONE DataCamp assignment: What Is Data Science?

- Data science definition biased towards Machine Learning
  #+attr_html: :width 600px

[[../img/power.png]]

- What do you think about the claim:

  /"Programming languages are like power tools"/

- What follows if this claim is true? What if it isn't?

** DONE [[https://github.com/birkenkrahe/ds1/blob/piHome/pdf/1_skills.pdf][What are your skills? (Mon 22-Aug)]]

** DONE 1st sprint review - Wed 31-Aug

- [[https://lyon.instructure.com/courses/568/assignments/1438][Canvas assignment with submission]]

- Complete [[https://lyon.instructure.com/courses/568/pages/enter-your-project-idea-and-participants-here][projects overview table]] in Canvas *today*!

- If you are in > 1 course, you can use the same project idea!

** DONE Test 2 open ("What is data science?")

** DONE Project idea: compare base-R and "Tidyverse"

- Base-R is the foundation software from CRAN (the one you're using)
- "Tidyverse" is a popular bundle of packages (like ~dplyr~)
- The project would consist of comparing both with examples, along the
  lines of Matloff's "[[https://github.com/matloff/TidyverseSkeptic][TidyverseSceptic]]" essay (see also recent [[https://github.com/matloff/TidyverseSkeptic/blob/master/RDesign.pdf][update]])

** DONE Practice: Run R in Org-mode file

- [[https://github.com/birkenkrahe/ds1/blob/piHome/org/1_overview_practice.org#run-r-in-org-mode-file][Instructions in GitHub]]
- Update your Emacs configuration file
- Check that you can run R inside Emacs

** IN PROGRESS Lecture/practice: introduction to R

1) [[https://github.com/birkenkrahe/ds1/blob/piHome/org/3_introR_practice.org][Download the file]]
2) Complete the file
3) Nothing to upload

* Week 3: Introduction to R
#+attr_html: :width 500px
[[../img/online.jpg]]


- [X] [[file:~/Documents/R/ds1/3_introR_practice.org][Complete introR practice file]]
- [ ] Lecture & practice: arithmetics in R
- [ ] DataCamp assignment "[[https://app.datacamp.com/learn/courses/free-introduction-to-r][Intro to basics]]"

** DataCamp assignment "Intro to basics"

- Always try stuff on your own (using the console or Emacs)
- R as a scientific calculator
- Assignment operators ~<-~, ~=~, ~->~
- ~ls()~ function (list defined R objects)
- Review: how do you add two variables ~x~ and ~y~?
- Tip: you can use ~;~ to add commands on one line
- Review: which data types does R have?
- Useful functions: (object) ~class~, (storage) ~mode~ (or ~typeof~)

  #+begin_src R :session *R* :result outout
    foo <- "a"; foo
    typeof(foo)
    typeof(x)
  #+end_src

  #+RESULTS:
  : double

** READ Monday Aug 29 last day to drop class

[[../img/drop.png]]

(https://my.lyon.edu/ICS/Academics/Student_Forms.jnz)

** GNU Emacs: ref cards
#+attr_html: :width 400px
[[../img/gnu.jpg]]

- [ ] The power of Dired on one page ([[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][v28]])
- [ ] The power of Emacs on two pages ([[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][v27]])

** Review: [[https://lyon.instructure.com/courses/568/assignments/1452][test 2 - what is data science?]]

- *Which skills are relevant for data science?*
  + Customer service skills is a general people skill, not specific to
    data science
  + Database management is a general IT skill, not specific to data
    science
  + "Sales knowledge" is domain knowledge, and actually not a skill
P    (bad phrasing of the question on my part)
+ All skills and all knowledge can of course be brought to bear on
  data science, which means this is not a very well focused question

- *Which of these are part of the typical data science process?*
  + The typical data science process does not involve "machine
    learning" (ML). ML is a specific data science application.
  + Coding is a skill

- Data science as a *discipline* is neither very immature (undefined)
  nor very mature (standardized). It's changing so fast that its
  "maturity" is difficult to assess

- *Purpose of Scrum:* team and customer happiness are not suitable
  goals, because 'happiness' is highly subjective - too hard to define
  and measure (it's marketing and sales lingo)

- *Coding*, though still relevant and important, is no longer the most
  important skill for data scientists

* Week 4: Arithmetics in R
#+attr_html: :width 300px
[[../img/numbers.jpg]]

- [X] Emacs + Org-mode + ESS
- [X] Review test 3
- [X] Review 1st sprint review
- [X] Review vectors in R (1)
- [X] Practice: introduction to R
- [X] Arithmetics in R (lecture + practice)

** DONE [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-do-emacs--org-mode--ess-work-work-together][How Emacs, Org-mode and ESS work together]]

#+attr_html: :width 500px
[[../img/emacsorg.png]]

** DONE Review: test 3 - getting started with R

- What does ~help(x)~ do in R?
  - To access web pages on a device that device needs to run a web server
  - Apache web server (FOSS)
  - XAMPP from https://www.apachefriends.org/

- What type of argument does ~install.packages~ require?
  - e.g. installing ~MASS~: ~install.packages("MASS")~

- What is the difference between ~Rscript~ and ~R CMD BATCH~?

** DONE Review: 1st sprint review
#+attr_html: :width 400px
[[../img/pitchers.png]]

- What is a *reference*? What do I have to reference?
  1) All sources (incl. personal comm., incl. software like R)
  2) *Author(s)*, *Date of publication*, *Place of publication*, *Title*
  3) References need to be consistent and complete
- What do you think of [[https://www.marktechpost.com/2022/08/14/top-data-visualization-tools-for-data-science-and-analytics/][this reference]] in particular?

- Excellent *questions* for other teams (Kim/Balah/Boogie):
  1) Where and how did you find your data?
  2) What was challenging about picking your topic?

** DONE Better next time!
#+attr_html: :width 500px
[[../img/1_scrum.png]]

- *SUMMARY:*
  1) deliver more than the bare minimum
  2) work systematically, gather and list your references
  3) split up the work if you work in a team
  4) ask me for support before the sprint review deadline
  5) reflect on your project process and project success

** DONE Review: DataCamp chapter "[[https://lyon.instructure.com/courses/568/assignments/1437][Vectors in R]]" (1)

The first part of the review deals with vector data types and names.

1) There is no "Boolean" type in R, but ~logical~ instead, e.g. for the
   value ~TRUE~. How can I show this?

   #+begin_src R
     class(TRUE)
   #+end_src

   #+RESULTS:
   : logical

2) How can I turn ~TRUE~ in a vector named ~bool~?

   #+begin_src R :results output
     bool <- c(TRUE)
     bool
   #+end_src

   #+RESULTS:
   : [1] TRUE

3) How can I make sure it's a vector?

   #+begin_src R :results output
     bool <- c(TRUE)
     is.vector(bool)
   #+end_src

   #+RESULTS:
   : [1] TRUE

4) Is ~bool~ a named vector? How do I know?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool)
   #+end_src

   #+RESULTS:
   : NULL

5) If ~bool~ is not named, how can I name it?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool) <- "Nick"
     names(bool)
     bool
   #+end_src

   #+RESULTS:
   : [1] "Nick"
   : Nick
   : TRUE

** DONE Solutions

1) There is no "Boolean" type in R, but ~logical~ instead, e.g. for the
   value ~TRUE~. How can I show this?

   #+begin_src R
     class(TRUE)
   #+end_src

2) How can I turn ~TRUE~ in a vector named ~bool~?

   #+begin_src R :results output
     bool <- c(TRUE)
     bool
     class(bool)
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] "logical"

3) How can I make sure it's a vector?

   #+begin_src R
     bool <- c(TRUE)
     is.vector(bool)
   #+end_src

   #+RESULTS:
   : TRUE

4) Is ~bool~ a named vector? How do I know?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool)
   #+end_src

   #+RESULTS:
   : NULL

5) If ~bool~ is not named, how can I name it?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool) <- "Joey"
     bool
     names(bool)
   #+end_src

   #+RESULTS:
   : Joey
   : TRUE
   : [1] "Joey"

** DONE Practice: Introduction to R (customization)

#+attr_html: :width 500px
[[../img/3_play.jpg]]

** NEXT DataCamp assignment: "[[https://lyon.instructure.com/courses/568/assignments/1439][Matrices in R]]" (Sept 14)
* Week 5: Vectors in R
#+attr_html: :width 300px
[[../img/queen1.jpg]]

- [X] Review DataCamp vectors in R (2)
- [X] Featured applications: automation, Python, learning
- [X] Continued: Arithmetic in R (lecture/practice)
- [X] Review test 4 - arithmetic in R
- [X] Vectors in R

** DONE Review: DataCamp chapter "Vectors in R" (2)

1) How can you add ~c(1,2,3)~ and ~c(4,5,6)~?

   #+begin_src R :results output
     ## save vectors as R objects (variables)
     foo <- c(1,2,3)
     bar <- c(4,5,6)

     ## add vectors as they are
     c(1,2,3) + c(4,5,6)

     ## add vectors as variables
     foo + bar

     ## add vectors by hand
     c(1 + 4, 2 + 5, 3 + 6)
   #+end_src

   #+RESULTS:
   : [1] 5 7 9
   : [1] 5 7 9
   : [1] 5 7 9

2) What happens if you add a named and an unnamed vector?

   #+begin_src R :results output
     foo <- c("i"= 1, "j" = 2, "k" = 3)
     bar <- c(4,5,6)
     names(foo)
     names(bar)
     foo + bar
     names(foo + bar)
   #+end_src

   #+RESULTS:
   : [1] "i" "j" "k"
   : NULL
   : i j k
   : 5 7 9
   : [1] "i" "j" "k"

   Adding vectors of different length:
   #+begin_src R :results output
     foo <- c(1,2)
     bar <- c(1,2,3,4)
     foo + bar
   #+end_src

   #+RESULTS:
   : [1] 2 4 4 6

3) What is the result of comparing ~c(1,2,3)~ and ~c(4,5,6)~ using
   relational operators ~>~ and ~<~ ?

   #+begin_src R :results output
     c(1,2,3) > c(4,5,1)
     c(0,5,6) > c(1,2,3)
   #+end_src

   #+RESULTS:
   : [1] FALSE FALSE  TRUE
   : [1] FALSE  TRUE  TRUE

4) How can you add the first and second value of ~baz <- c(2,2)~?

   Parentheses suggest that ~baz~ is a function - this is not it:
   #+begin_src R :results output
     baz(1) + baz(2)
   #+end_src

   #+begin_src R :results output
     baz <- c(2,2)
     baz[1] + baz[2]
   #+end_src

   #+RESULTS:
   : [1] 4

5) What happens if you get it wrong, and you try to add a value that's
   not there?

   #+begin_src R :results output
     foo <- c(1)
     foo[1]
     foo[2]
     foo[1] + foo[2]
   #+end_src

   #+RESULTS:
   : [1] 1
   : [1] NA
   : [1] NA

6) What does ~qux[c(1:3)]~ mean?

   #+begin_src R :results output
     qux <- c(10,100,1000)
     qux[1]; qux[2]; qux[3] # print individual values
     qux[c(1,2,3)]  # print values using index vector
     qux[c(1:3)]
   #+end_src

   #+RESULTS:
   : [1] 10
   : [1] 100
   : [1] 1000
   : [1]   10  100 1000
   : [1]   10  100 1000

7) How can you extract elements from ~qux~ that are greater than 100?

   #+begin_src R :results output
     qux <- c(10,100,1000)

     ## This generates an index or selection vector
     qux > 100

     ## Values of qux greater than 100
     qux[qux > 100]

     ## same as
     qux[c(F,F,T)]

     ## Index of extracted values
     which(qux > 100)

     qux[which(qux>100)] # resolves to qux[3]
   #+end_src

   #+RESULTS:
   : [1] FALSE FALSE  TRUE
   : [1] 1000
   : [1] 1000
   : [1] 3
   : [1] 1000

** DONE Arithmetics in R - lecture & practice

#+attr_html: :width 700px
[[../img/setup.png]]

- Download/open the Org-mode file from GitHub: [[https://tinyurl.com/4dekhhw5][tinyurl.com/4dekhhw5]]

- Put your name and ~[pledged]~ next to it in the meta data header

- Open an R console inside Emacs with ~M-x R~

- We'll go back and forth between lecture and practice file

- You can change between Emacs buffers with ~C-x o~ (~other window~)

- You can look at a list of all your open buffers with ~C-x C-b~

- You can go back to the last visited buffer with ~C-x b~

- You can cycle through buffers with your mouse (on the buffer title)

** Featured applications (R and around R)

[[https://github.com/birkenkrahe/ds1/issues][See GitHub issues list]]:
- Automate tasks with R (using UNIX' cron(1))
- Python vs. R by IBM (7 min)
- Learning a new programming language (8 min)

#+attr_html: :width 500px
[[../img/horizon.jpg]]

#+begin_quote
Frank Stajano: /"The single most important factor of your learning
success is that you enjoy and would do it for its own sake."/
#+end_quote

1) Understand how you learn and choose resources that support your
   *learning style*
2) Set your own *incentives* and *goals* that you like and stage them as
   stepping stones
3) Learn from the *best* - check competence of authors, e.g. to learn a
   language, grab the book written by the author[fn:1], and study
   conventions of great programmers in that language[fn:2].

#+begin_quote
“Anyone who has lost track of time when using a computer knows the
propensity to dream, the urge to make dreams come true, and the
tendency to miss lunch.” — Tim Berners-Lee
#+end_quote
** DONE Review test 4

1) What is ~log(1)~ independent of the base parameter
2) What are exponentiation operators in R: ~^, ~**~, ~exp~
   #+begin_src R
     exp(1)
   #+end_src

   #+RESULTS:
   : 2.71828182845905
3) What's the difference: ~log(base=10,x=100)~ vs. ~log(x=100,base=10)~
4) What's ~format(271.82e-2, scientific=FALSE)~
   #+begin_src R
     format(271.82e-2, scientific=FALSE)
   #+end_src

   #+RESULTS:
   : 2.7182
5) What's ~-4**2 + 2~ vs ~(-4)**2 + 2~
   #+begin_src R :results output
     -4**2 + 2
     (-4)**2 + 2
   #+end_src

   #+RESULTS:
   : [1] -14
   : [1] 18
6) What is ~sqrt(2)^2 == 2~
   #+begin_src R
     sqrt(2)^2 == 2
   #+end_src

   #+RESULTS:
   : FALSE
7) What is ~all.equal(exp(3000),Inf)~
8) What is ~identical(exp(3000),Inf)~

   #+begin_src R :results output
     all.equal(exp(3000),Inf)
     identical(exp(3000),Inf)
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] TRUE
9) What are the special values in R? Are they all numeric?
   #+begin_src R :results output
     class(NaN)
     class(NA)
     class(Inf)
   #+end_src

   #+RESULTS:
   : [1] "numeric"
   : [1] "logical"
   : [1] "numeric"
10) What's ~NA+1~

11) What's ~NA**0~

12) What's ~mean(1,3)~

    #+begin_src R :results output
      mean(1,3)  # mean(x=1,???)
      mean(c(1,3))
    #+end_src

    #+RESULTS:
    : [1] 1
    : [1] 2

13) What are the elements of a complete reference?

14) How can you find out what is ~$HOME~ to Emacs?
    #+attr_html: :width 600px
    [[../img/emacshome.png]]

15) How can you make sure that the R session runs in Emacs' ~$HOME~?
    #+attr_html: :width 600px
    [[../img/setwd.png]]

#+begin_src R :results output
  log(1)
  format(271.82e-2, scientific=FALSE)
  -4**2 + 2
  (-4)**2 + 2
  all.equal(exp(3000),Inf)
  identical(exp(3000),Inf)
  exp(709.7)
  class(NaN)
  class(NA)
  class(Inf)
  NA+1
  NA**0
  mean(c(1,3))
  mean(1,3)
#+end_src

#+RESULTS:
#+begin_example
[1] 0
[1] "2.7182"
[1] -14
[1] 18
[1] TRUE
[1] TRUE
[1] 1.654984e+308
[1] "numeric"
[1] "logical"
[1] "numeric"
[1] NA
[1] 1
[1] 2
[1] 1
#+end_example

* Week 6: Vectors in R (continued)
#+attr_html: :width 600px
[[../img/5_workhorse.png]]

- Journey down the Nile (plotting example)
- Vectors as sequences and repetitions
- Sorting and measuring length of vectors
- Naming, indexing and subsetting
- Practice creating vectors

** Featured application: S

- John M. Chambers: S, R, and Data Science ([[This talk discusses the history and characteristics of the R software. R began, 20-odd years ago, as the open-source clone of the S software. So the story of R has to start with S and with its history. S came from the Statistics and Data Analysis Research group at AT&T Bell Labs. We'll see that the design goal of S, and so of R, is to support studies in what we'd now call data science. The principles resulting from this goal are still central to computing for data science.][video]])
  #+attr_html: :width 400px
  [[../img/chambers.png]]
  #+begin_quote
  This talk discusses the history and characteristics of the R
  software. R began, 20-odd years ago, as the open-source clone of the
  S software. So the story of R has to start with S and with its
  history. S came from the Statistics and Data Analysis Research group
  at AT&T Bell Labs. We'll see that the design goal of S, and so of R,
  is to support studies in what we'd now call data science. The
  principles resulting from this goal are still central to computing
  for data science.
  #+end_quote

- Development of S was influenced by [[https://en.wikipedia.org/wiki/APL_(programming_language)][APL ("A Programming Language")]],
  whose central data structure is the multi-dimensional array. What
  does the APL logo remind you of?

  [[../img/apl.png]]

** DataCamp deal - mid-term miracle
#+attr_html: :width 300px
[[../img/miracle.jpg]]

- It's a mid-term miracle! You can complete missing DataCamp lessons
  by Friday, Sept 30, 12 pm for 50% of the points! Alleluiah!

- This course is all about *getting the skills*, not about getting the
  certificate(s) or the grades (though these are nice to have, too).

- The next DataCamp assignment ([[https://lyon.instructure.com/courses/568/assignments/1439][Matrices in R]]) postponed by 1 week

- The next 2-3 assignments will be independent sets of exercises to be
  completed in and submitted as Org-mode files - [[https://lyon.instructure.com/courses/568/assignments/2952][1st assignment today!]]

** DONE Review: creating, sorting, measuring vectors

1) How many parameters does ~options()~ have?
   #+begin_src R
     is.vector(options()) # though technically a list object, also a vector
     length(options())  # vectors (and lists) have a length
   #+end_src
2) How can you create a vector ~foo~ with: 1, b, TRUE
   #+begin_src R
     foo <- c(1,"b",TRUE) # vectors must have ONE data type only
     foo
     class(foo) # foo is coerced into a character vector
   #+end_src
3) How can you create a vector ~bar~ with: 2,2,3,3,2,2,3,3,456,78,79,80
   #+begin_src R
     bar <- c(
       c(2,2,3,3,2,2,3,3,456,78,79,80),
       c(rep(c(2,3), times=2, each=2), 456, 78:80),
       c(rep(c(2,3), times=2, each=2), as.integer("456"), seq(78,80))
     )
     identical(bar[1:12],bar[13:24])
     identical(bar[13:24],bar[25:36])
   #+end_src
4) What is the default order of ~sort~? How can you change it?
5) What is the length of ~c(1,34.5,rep(1,2,2),5*100,8:10)~
   #+begin_src R
     baz <- c(1,34.5,rep(1,2,2),5*100,8:10)
     baz
     length(baz)
     rep(1,2,2)
     rep(x=1,times=2,length.out=2) # length.out = desired length
     rep(x=1,times=2,each=2)
     rep(x=1,times=2,length.out=NA,each=2)
   #+end_src

** TODO About the 2nd sprint review
#+attr_html: :width 600px
[[../img/scrum.png]]

- *Read* my comments carefully and respond to them
- *Distinguish* your projects if your topic spans > 1 course
- *Complete* your literature review to identify methods
- *Highlight* your method(s) (how you want to do it)
- *Ask* questions for customer/teams
- *Read* the FAQ »[[https://github.com/birkenkrahe/org/blob/master/FAQ.org#what-should-we-do-in-the-second-sprint][What should we do in the 2nd sprint]]«
- *Read* the FAQ »[[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-do-you-report-on-and-plan-a-research-method][How do you report on and plan a research “method”?]]«
- *Submit* a text file or a PowerPoint presentation
- *Meet* the deadline or lose all points

- *What is special about a "introduction to data science" project?*
  1) Emphasis on basics and concepts
  2) Emphasis on data origin, quality
  3) Emphasis on basic uses of R
- If you don't know what this means --> ASK ME

** TODO Vectors: naming, indexing, coercion
#+attr_html: :width 600px
[[../img/coercion.jpg]]

End of the lecture on vectors. Next stop: subsetting/extraction.

* Week 7: Creating, sorting, measuring vectors
#+attr_html: :width 400px
#+caption: Francisco Goya, 'The Colossus (ca. 1818–25). Museo Nacional del Prado, Madrid.
[[../img/colossus.jpeg]]

- [X] Upload in-class practice file for [[https://github.com/birkenkrahe/ds1/blob/piHome/org/5_vectors.org]["Vectors in R"]] (or send it)
- [X] Upload in-class practice file for "Indexing vectors" (or send it)
- [X] Review test 5 - vectors and matrices in R
- [X] Review test 6 - creating, sorting, measuring vectors
- [X] 2nd sprint review due by Friday afternoon
- [X] Lecture/lab subsetting vectors
- [X] Next DataCamp lesson "Factors" (complete by Oct 7)

** Review test 5 - vectors and matrices in R

1) What's a "scalar"?

2) Which commands creates this matrix?
   #+begin_example R
          [,1] [,2]
     [1,] "1"  "2"
     [2,] "a"  "b"
   #+end_example

   #+begin_src R
     matrix(c("1","2","a","b"), nrow=2, byrow=TRUE)
     rbind(c(1,2),c("a","b"))
     cbind(c(1,"a"),c(2,"b"))  # not recommended - mixed data types
   #+end_src

3) What R data type/object is ~rbind(1, "Archipel Gulag")~ (and what
   does "Archipel Gulag" mean?)
   #+begin_src R
     rb <- rbind(1,"Archipel Gulag")
     rb
     is.vector(rb)
     is.matrix(rb)
     is.numeric(rb)
     is.character(rb)
   #+end_src

4) What R object is ~c(1,2) == c(1,2)~, what's the result and why?
   #+begin_src R
     c(1,2) == c(1,2) # the result is a 2-element logical vector because
                                             # every element of each vector is compared with its
                                             # opposite number
   #+end_src

5) What is ~matrix(c(c(1,2)))~ - what is ~matrix(c(1, c(1,2)))~?
   #+begin_src R
     m1 <- matrix(c(c(1,2)))   # c(c(1,2)) is c(1,2)
     m2 <- matrix(c(1, c(1,2)))  # one-dimensional matrix
     c(c(1,2))
     c(1,c(1,2))
     m1
     m2
     dim(m2)
   #+end_src

6) How do you extract elements from ~qux <- c(10,100,1000)~ that are
   greater or equal than 100 (without doing it manually)?
   #+begin_src R
     qux <- c(10,100,1000)   # define vector
     qux[qux >= 100]         # logical index vector
     qux[which(qux >= 100)]  # indices extracted with which()

     which(qux>=100)  # index vector - indices for F T T
     qux >= 100     # logical vector F T T

     qux[(qux >= 100) + 1] # extracts elements (F,T,T)+1=(T,T,T)
     qux[which(qux >= 100) + 1] # extracts elements (3,4)
   #+end_src

7) In R, what is ~(-8)^(1/3)~
   #+begin_src R
     (-8)^(1/3)
   #+end_src

8) The output show the Star Wars revenue data for three films
   [[../img/t5matrix.png]]
   Which command extracts the names like this:
   #+begin_example R
   : [1] "A New Hope"              "The Empire Strikes Back"
   : [3] "Return of the Jedi"
   #+end_example

   #+begin_src R
     star_wars <- cbind(
       "US" = c(460.998,290.475,309.306),
       "non-US" = c(314.4,247.9,165.8))

     rownames(star_wars) <- c("A New Hope",
                              "The Empire Strikes Back",
                              "Return of the Jedi")
     star_wars
     rownames(star_wars)
   #+end_src

** Review test 6 - creating, sorting, measuring

1) What is the difference between:
   - ~options~
   - ~options()~
   - ~names(options())~

   #+begin_src R
     str(options)  # a function - needs an argument
     is.vector(options()) # a non-atomic vector (and a list)
     head(options(),1)
     class(names(options()))
     head(names(options()),2)
   #+end_src

   #+RESULTS:
   : function (...)
   : [1] TRUE
   : $add.smooth
   : [1] TRUE
   : [1] "character"
   : [1] "add.smooth"        "browserNLdisabled"

2) What is ~letters~ and what data type is ~length(letters)~?
   #+begin_src R
     letters
     length(letters)
     dim(letters)   # this is NULL for vectors
   #+end_src

3) What is ~c(TRUE, FALSE, 2)~
   #+begin_src R
     c(TRUE,FALSE,2) #coerced into a numeric vector
     class(c(TRUE,FALSE,2))
     2 == TRUE
     1 == TRUE    # internal representation of Booleans
     0 == FALSE
     T == TRUE    # short cut
     F == FALSE
   #+end_src

4) What type of vector is ~c(FALSE, "Lyon", Inf)~
   #+begin_src R
     c(FALSE, "Lyon", Inf)
     is.character(c(FALSE, "Lyon", Inf))
   #+end_src

   #+RESULTS:
   : [1] "FALSE" "Lyon"  "Inf"
   : [1] TRUE

5) How can you create a vector ~"a" "b" "c" "a" "b" "c"~
   #+begin_src R
     c("a", "b","c", "a", "b", "c")
     rep(letters[1:3], times=2)
     rep(c("a","b","c"), times=2)
   #+end_src

6) Which command reverses ~x <- seq(from=1,to=3.6, by=0.5)~
   #+begin_src R
     x <- seq(from=1,to=3.6, by=0.5)
     x
                                             #     seq(from=3.6,to=1, by=0.5)
     seq(from=3.6,to=1, by=-0.5)
     sort(x, decreasing=TRUE)
   #+end_src

   #+RESULTS:
   : [1] 1.0 1.5 2.0 2.5 3.0 3.5
   : [1] 3.6 3.1 2.6 2.1 1.6 1.1
   : [1] 3.5 3.0 2.5 2.0 1.5 1.0

7) What is the length of ~c(3e+1, rep(5,10, 5))~. NOTE: this question
   was malformatted: ~rep(from=5, times=10, 5)~ is just confusing and it
   is odd that R would accept it at all...
   #+begin_src R
     ## default behavior:
     ## rep(x, times = 1, length.out = NA, each = 1)
     rep(5,10,5) # x = 5, times = 10, length.out = 5
     rep(x=5,times=10, length.out=5)
   #+end_src

   #+RESULTS:
   : [1] 5 5 5 5 5
   : [1] 5 5 5 5 5

8) If ~x <- c(1,2)~ What is
   - ~names(x)~
   - ~names(x) <- c("1", NA); x~
   - ~names(x) <- c("1", ""); x~
   #+begin_src R
     x <- c(1,2); x; names(x)
     names(x) <- c("1",NA); x
     names(x) <- c("1",""); x
   #+end_src

9) What types are the rows and columns of this data frame? What are
   their names?
   #+begin_example R
             jane joe   jim
     janet      1   a  TRUE
     jackson    2   b FALSE
     jordan     3   c FALSE
   #+end_example
   #+begin_src R
     df <- data.frame(
       "jane"=1:3,
       "joe"=letters[1:3],
       "jim"=c(TRUE,FALSE,FALSE))
     rownames(df) <- c("janet","jackson","jordan")
     df
     names(df$"joe")
     colnames(df)
     colnames(df[2])
   #+end_src

   #+RESULTS:
   :         jane joe   jim
   : janet      1   a  TRUE
   : jackson    2   b FALSE
   : jordan     3   c FALSE
   : NULL
   : [1] "jane" "joe"  "jim"
   : [1] "joe"

** Review naming vectors and indexing

- [ ] The open question from Monday - how to fix ~bar~? The problem:
  ~names(bar)[6:7]~ should only overwrite two elements of ~names(bar)~,
  but instead the elements 1:5 were missing!
  #+begin_src R
    week <- c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")
    foo <- seq(from=100, to=200, length.out=7)
    names(foo) <- week
    foo
    workweek <- week[-(6:7)]
    workweek
    names(foo) <- workweek
    names(foo)  # last two names are now missing
    names(foo)[6:7]
    names(foo)[6:7] <- week[6:7]
    foo
  #+end_src

  #+RESULTS:
  :      Mon      Tue      Wed      Thu      Fri      Sat      Sun
  : 100.0000 116.6667 133.3333 150.0000 166.6667 183.3333 200.0000
  : [1] "Mon" "Tue" "Wed" "Thu" "Fri"
  : [1] "Mon" "Tue" "Wed" "Thu" "Fri" NA    NA
  : [1] NA NA
  :      Mon      Tue      Wed      Thu      Fri      Sat      Sun
  : 100.0000 116.6667 133.3333 150.0000 166.6667 183.3333 200.0000

  #+begin_src R
    names(foo) <- NULL  # this command was the culprit!
    names(foo)
    names(foo)[6:7] <- week[6:7]
    names(foo)
  #+end_src

  #+RESULTS:
  : NULL
  : [1] NA    NA    NA    NA    NA    "Sat" "Sun"

- [ ] How many ways are there to extract the elements 3 to 4 of this vector?
  #+begin_src R
    vec <- c("hundred"=100, "thousand"=1000, "fifty"=50, "five-hundred"=500)
    vec
  #+end_src

  #+RESULTS:
  :      hundred     thousand        fifty five-hundred
  :          100         1000           50          500

  #+begin_src R
    vec[3:4]
    vec[-(1:2)]
    vec[c("fifty","five-hundred")]
    vec[c(length(vec)-1,length(vec))]
  #+end_src

- [ ] If ~z <- c("Alpha" = 0, "Omega" = 1)~ what are:

  1) ~names(z)["Alpha"]~

  2) ~names(z)[-2]~

  3) ~z["Alpha"]~

  4) ~z[1]~

  5) ~names(z) <- NULL; z[1]~

  #+begin_src R
    z <- c("Alpha" = 0, "Omega" = 1)
    names(z)[c(TRUE,FALSE)]
    names(z)[-2]
    z["Alpha"]
    z[1]
    names(z) <- NULL; z[1]
  #+end_src

** [[https://lyon.instructure.com/courses/568/assignments/2903][Upload Vectors in R in-class practice file]]
#+attr_html: :width 600px
[[../img/vectorsinR.png]]
** Lab: indexing vectors ([[https://github.com/birkenkrahe/ds1/blob/piHome/org/5_vectors.org#indexing-vectors][GitHub]])
#+attr_html: :width 300px
[[../img/indexing.jpg]]

Functions and operators for subsetting:
- Get element 5 of vector v: ~v[5]~
- Length of v: ~length(v)~
- Remove element 5 of vector v: ~v[-5]~
- Positive elements of v: ~v[v>0]~
- Logical flag vector: ~v>0~
- Indices of zero elements of v: ~which(v==0)~
  #+begin_src R
    v <- c(45, -3, 2)   # example vector v
    length(v)           # length of v
    v[3]                # 3rd element of v
    v[-3]               # all of v but 3rd element
    v[v<0]              # negative elements with logical flag vector
    which(v<0)          # indices of negative elements of v
    v[which(v<0)]       # negative elements of v with which()
  #+end_src

  #+RESULTS:
  : [1] 3
  : [1] 2
  : [1] 45 -3
  : [1] -3
  : [1] 2
  : [1] -3

  *Download raw practice file [[https://raw.githubusercontent.com/birkenkrahe/ds1/piHome/org/5_indexing_practice.org][from GitHub]]: tinyurl.com/5n6t398v*

  *See also lecture with examples [[https://github.com/birkenkrahe/ds1/blob/piHome/org/5_vectors.org#indexing-vectors][on GitHub]]: tinyurl.com/bdfdrf4x*

** Project Update - 2nd sprint
#+attr_html: :width 600px
[[../img/scrum.jpg]]

*Let's hear from a few teams:*
- What's your research question?
- What's your chosen method?
- What're your sources?
- What's your excitement level (not in life but rgd the project)?

** What did you learn so far?
#+attr_html: :width 600px
[[../img/darts.jpg]]

*What did you learnt in the first 1/2 of the term?*

What's on your list?
#+begin_src R
  learn <-

    c("foo","vectors","matrix","R","indexing","data science skills",
      "help", "functions", "sorting","link")

#+end_src

Here's my list - 3 x infrastructure + 7 x content
#+begin_quote
1) /Basic agile project management process (with Scrum)/
2) /Principles and practice of [[http://www.literateprogramming.com/][Literate Programming]]/
3) /Introduction to GNU Emacs + ESS + Org-mode infrastructure/
4) Data science jobs, skills, job profiles and trends
5) Why R, R console, shell commands and basic workflow
6) R package management: installing, loading, viewing data
7) R as a community project for data exploration and analysis
8) Arithmetic with R: numbers and mathematical expressions
9) How to create, sort, measure vectors and extract indices and values
10) Everything is an object, and there's a function for everything
#+end_quote

* Week 8+9: Subsetting and extracting, factors
#+attr_html: :width 500px
[[../img/week8.jpg]]

- [X] Review 2nd sprint review
- [X] Lecture: subsetting vectors and extracting elements
- [X] Invitation to the Lyon career fair (w/incentive)
- [X] Review DataCamp lesson on Factors
- [X] [[https://app.datacamp.com/groups/lyon-college-data-science-fall-2022/assignments][DataCamp assignments 8-10: data frames, lists, data import]]
- [X] Lab session: subsetting with ~Nile~

** Review: 2nd sprint review
#+attr_html: :width 500px
[[../img/scrum.png]]

- Question (Hayden & Nick): »What do you do when you feel like you are
  starting to stall in progress towards your goal?«
  #+begin_notes
  My answer to your question: in an agile Scrum-like project, this is
  easy: contact me as the customer after analysing your issues and have
  a frank discussion. This opens up negotiations with the customer. Such
  negotiations may result in a modified goal or process, but they
  certainly will inject some needed energy. If the problem persists
  afterwards, external factors may play a role (e.g. other commitments).
  #+end_notes

- Questions (Jackson):
  1) Wide or narrow focus (e.g. special players or whole league)
     #+begin_notes
     It depends on your question, on the validity of the data, on the
     size of the sample(s), and on what others have done before you
     (which also indicates a pattern of questions interesting to
     others)
     #+end_notes
  2) Are we far enough in our project yet (in comparison with others)?
     #+begin_notes
     No reason to worry about relative progress: I am not grading on a
     curve. Some projects are further along than others, and my
     comments will reflect that. Projects with literature review and
     with very specific, clear questions (or sub-questions) are
     generally further along.
     #+end_notes
  3) Is the topic too broad? Should we take fewer variables?
     #+begin_notes
     For exploration, always download/save as much data as you can. I
     like to build up my exploration from small scenarios: work from
     interesting questions, not from raw data. This is a better way to
     get to know the data. Also, again: other people's related
     investigations may give you interesting insights.
     #+end_notes

- Whatever you do, you should comment on your choices and reflect
  minimally at least on what your options were and why you chose them.

- Is there a specific dress code?  Answer: no, but you should always strive to look "professional" (this means adapted to the occasion - possible check with someone)
** Lyon College Career Expo
#+attr_html: :width 300px
[[../img/recruit.jpg]]

- Matthew Stewart (Stone Ward, Little Rock) will be there: Stone Ward
  offers data science mini-internships and paid big internships

- Many other organizations are likely to look for talent: Senior
  students should definitely go to this talent show

- Special incentive: bring back a company story for points

- [X] Who will attend?

- [X] What does "Come dressed for success" mean in this case?
  #+attr_html: :width 200px
  [[../img/dress-for-success.png]]
  [[https://uca.edu/career/files/2017/09/dress-for-success.png][Source: uca.edu]]

** Review DataCamp Factors
#+attr_html: :width 400px
[[../img/factory.jpg]]

- [ ] Open an Org-mode file in Emacs for R code blocks to code along:
  on the (Windows) command line, enter ~emacs --file factor.org~ to load
  the file into the 1st buffer (it'll be created if it doesn't exist).

- [ ] In ~factor.org~ insert any of your other R coding files with ~C-x i~
  followed by the file name. This will give you the necessary header.

- [ ] Run *each* header line to activate it and start an R session ~*R*~
  (run with ~C-c C-c~, resulting in: /"Local setup has been refreshed"/)

- [ ] Delete all lines below the header lines by going to the first
  character with your cursor, set the mark (~C-x SPC~), expand region to
  EOF (~M->~) and delete (~DEL~). Now your Emacs buffer should look like
  this: like this:
  #+attr_html: :width 500px
  [[../img/meta.png]]

- [ ] What is the format of the ~factor~ function? How can you find out?
  #+begin_example R
  factor(x = character(),      # character vector data
         levels,           # optional vector of unique values
         labels = levels,
         exclude = NA,
         ordered = is.ordered(x),
         nmax = NA)
  #+end_example
- [ ] How can you find out what the definition of ~factor~ is?
  #+begin_example R
  str(factor) # structure of the function object
  help(factor) # online help with examples: quit process with C-g
  factor # prints function definition
  #+end_example
- [ ] How can you find out what all these options really mean?
  #+begin_src R
    example(factor)
  #+end_src
- [ ] Create a ~character~ vector ~answers~ from investors, with the
  values: {stock, bond, bond, stock}
  #+begin_src R
    answers <- c("stock","bond","bond","stock")
    answers
  #+end_src
- [ ] Create a variable ~investment~ from ~answers~ using ~factor~ and check
  if it is ordered and named
  #+begin_src R
    investment <- factor(answers)
    investment
    is.ordered(investment)
    names(investment)
  #+end_src
- [ ] Where do the ~integer~ values in ~str(investment)~ come from?
  #+begin_src R
    str(investment)  # structure of the factor vector
    as.integer(investment)   # integer values of the vector variable values
    str(ToothGrowth)        # another example: a data frame
    as.integer(ToothGrowth$supp)   # integer values of the factor variable values
  #+end_src
- [ ] How would you order ~investment~ so that "bonds" are less than
  "stocks"?
  #+begin_src R
    i1 <- factor(answers, order=TRUE)
    i1
    is.ordered(i1)
    str(i1)
    summary(i1)  # the statistical summary is a contingency table
  #+end_src
- [ ] How would you order ~investment~ so that "stocks" are less than
  "bonds"?
  #+begin_src R
    answers
    i2 <- factor(answers,
                 levels=c("stocks","bonds"),
                 ordered=TRUE)
    str(i2)
    summary(i2)
  #+end_src
- [ ] Why are ~NA~ introduced by coercion?
  #+begin_notes
  Because the character strings cannot be properly formatted as
  numeric values. Notice that there is no warning!
  #+end_notes
  #+begin_src R
    as.numeric(i2)
  #+end_src
- Example taken from [[https://campus.datacamp.com/courses/introduction-to-r-for-finance/factors-4?ex=1]["Introduction to R for Finance" @DataCamp]]

** Review: indexing the Nile

- Print only the last year of observations from the data set ~Nile~?
  #+begin_src R

    length(Nile)
    time(Nile)
    time(Nile)[length(Nile)]
  #+end_src

  #+RESULTS:
  #+begin_example
  [1] 100
  Time Series:
  Start = 1871
  End = 1970
  Frequency = 1
    [1] 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885
   [16] 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900
   [31] 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915
   [46] 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930
   [61] 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945
   [76] 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960
   [91] 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970
  [1] 1970
  #+end_example

- Print the flow through the Nile in the year 1966
  #+begin_src R
    Nile[time(Nile)==1966]
  #+end_src

  #+RESULTS:
  : [1] 746

** Lecture/practice: subsetting and extracting
#+attr_html: :width 600px
[[../img/extraction.png]]

- How vectorization makes life easy in R
- How to retrieve vector elements
- How to remove vector elements
- How to put dissected vectors back together
- How to overwrite subvectors

** NOTE: [[HTTPS://LYON.INSTRUCTURE.COM/COURSES/568/DISCUSSION_TOPICS/940][NO CLASS ON FOUNDER'S DAY FRI OCT 21]]
** DataCamp assignment "Data Frames" (Oct 17)
[[../img/racing.jpg]]

- Data frames are the most important data structures for exploration
- This is not a difficult lesson (though we will review it in class)
- Make sure you complete it on time (October 17)

** Test 7: subset vectors, matrices, data frames
** Lab practice: ~Nile~ extraction!
#+attr_html: :width 500px
[[../img/nile.png]]

- Download the raw ~6_subsetting_practice.org~ [[https://github.com/birkenkrahe/ds1/blob/piHome/org/6_subsetting_practice.org][from GitHub]]:
  [[https://tinyurl.com/5fzh98vd][tinyurl.com/5fzh98vd]]

- Complete the tasks in class (ca. 30 min)

- When you're done, [[https://lyon.instructure.com/courses/568/assignments/3078][upload the Org-mode file to Canvas]]

* Week 10: Data frames, lists
#+attr_html: :width 400px
[[../img/frame.jpg]]

- [X] New test available (subsetting)
- [X] New practice sheet available (subsetting)
- [X] Review: data frames (DataCamp)
- [X] Lecture/practice: data frames
- [ ] 3rd sprint review coming up: first results!
** How can you find out what your problems are?
#+attr_html: :width 500px
[[../img/failure.jpg]]

- View a video = look at the transcript of your practice file in
  class, and/or watch the session recording
- Come up with simple questions and answers (with coding)
- Do the tests (again) - revisit the test after 1 week
- Do the practice files (hide answers and check your understanding)
- Do the DataCamp practice and look at the flashcards (mobile app)

** IN PROGRESS Review: data frames [DataCamp]
#+attr_html: :width 600px
[[../img/df.png]]

*Recall what we did last time and test your memory/understanding:*
- What is the function to create a data frame from scratch?
- What is the function to create a factor vector?
- What are the levels of a factor?
- Which functions are useful to quickly explore data frames?

*Let's continue with the remainder of the topics for data frames:* Open
the (partially filled) practice file in Emacs: [[https://tinyurl.com/mpes4wen][tinyurl.com/mpes4wen]]

*We will practice more on data frames next week after the short break*

** Lecture/practice: more about data frames/lists
#+attr_html: :width 400px
[[../img/ThisIsNotALecture.jpg]]

- What is a data frame?
- How do you create data frames?
- How can you subset data frames?
- Orange juice or Vitamin C?
- What about lists?

* Week 11: Data frames and 3rd sprint review
** I can teach it to you but I can't learn it for you
#+attr_html: :width 600px
#+caption: Prof Dr Gerhard Mack (2018)
[[../img/mack1.png]]

- Some of y'all's difficulties reminded me of this diary post:
  [[https://github.com/birkenkrahe/org/blob/master/diary.org#i-can-teach-it-to-you-but-i-cannot-learn-it-for-you]["I can teach it to you but I can't learn it for you."]]

- I remember this from my own studies: it was always dangerous to
  learn from a brilliant teacher (of which I had a few) because I
  mistook his competence for my own! His teaching usually put me into
  a trance: everything seemed to make sense and I understood it all!

- It is only when I tried to solve similar problems on my own
  afterwards, completely by myself, and failed miserably more often
  than not, that I understood the difference between learning
  something FROM someone else (which isn't really possible), and
  learning it BY yourself (which really is the only way of learning
  anything).

** Review of the review: data frames [DataCamp]
#+attr_html: :width 400px
[[../img/df1.png]]

*Recall what we did last time and test your memory/understanding:*

- Can you alter built-in data frames like ~mtcars~?
  #+begin_src R
  data(mtcars)  # reload pristine data frame from the package
  #+end_src

- Can you add a column to a built-in data frame? For example, a column
  of ~NA~ values called ~missing~ to the ~mtcars~ data frame.
  #+begin_src R
    mtcars <- data.frame(mtcars,"missing"=NA)
    str(mtcars)
  #+end_src

- What if we mess up and overwrite a built-in data frame by mistake?
  #+begin_src R
    ## reload the original data set
    data(mtcars)
    str(mtcars)
  #+end_src

- How do you extract values from a data frame? (For example: what's
  the mileage ~mpg~ of the Honda Civic in the ~mtcars~ data set?)
  #+begin_src R
    mtcars["Honda Civic","mpg"]  # indexing with row and col names
  #+end_src

- How do you add another row to a data frame? (For example: add a row
  for my ~Kia Rio~ to ~mtcars~

  Let's remove the useless ~NA~ column "missing" first:
  #+begin_src R
    idx <- which(colnames(mtcars)=="missing")
    mtcars <- mtcars[,-idx] 
    mtcars
  #+end_src

  Here are two alternative methods to do this:
  #+begin_src R
    mtcars <- mtcars[,-length(colnames(mtcars))]
    mtcars <- mtcars[,-ncol(mtcars)]
    mtcars
  #+end_src

  #+begin_src R
    data(mtcars)
  #+end_src

  Now add a new row:
  #+begin_src R
    nrow(mtcars)  # number of rows of the dataset
    mtcars <- rbind(mtcars,"Kia Rio"=NA)
    str(mtcars) # what will be different in this output?
    mtcars
  #+end_src
  
- How do you remove a row from a data frame?

  For example the ~Kia Rio~ row(s) from ~mtcars~?
  #+begin_src R
    mtcars <- mtcars[-(33:38),]
    mtcars
  #+end_src

- How do you (re)name rows of a data frame?

  For example the ~Honda Civic~ row to just ~Honda~?
  #+begin_src R
    idx <- which(rownames(mtcars)=="Honda Civic")
    rownames(mtcars)[idx] <- "Honda"
  #+end_src

  #+begin_src R
    rownames(mtcars)[19]
  #+end_src
 
*Let's continue with the remainder of the topics for data frames:* Open
the (partially filled) practice file in Emacs: [[https://tinyurl.com/mpes4wen][tinyurl.com/mpes4wen]]

*We will practice more on data frames next week after the short break*

** 3rd sprint review - write an abstract

Complete this review and submit it [[https://lyon.instructure.com/courses/568/assignments/1441][in Canvas]] by Nov 2, 11 am!

Here is an example from my current publication project - you're the
research participants!

Your abstract should have no more than 300 words. My example has 350
words (with many references still missing) and could easily be pruned
to 300. [[https://github.com/birkenkrahe/org/blob/master/research/Abstract.org][The full abstract (work in progress) is here]].

1) "One or two sentences providing a basic *introduction* to the field,
   comprehensible to a scientist in any discipline."

   #+begin_quote
   Data science draws on computer science, statistics and domain
   knowledge. It is highly *interdisciplinary*, even more so than other
   related fields like business intelligence or artificial
   intelligence. This interdisciplinarity leads to its alleged
   'sexyness' (Davenport/Patil, 2012 and 2022) - it purports to be
   open to students from a wide variety of backgrounds - like biology
   or psychology, who are interested in widely different
   applications - like genome analysis or marketing predictions (???).
   #+end_quote

2) "Two or three sentences of more detailed *background*, comprehensive
   to scientists in related disciplines."

   #+begin_quote
   This versatility comes at a price: the beginner's learning path in
   data science is highly fragmented - it involves different
   programming languages, data visualization techniques, mathematical
   and process modeling, and knowledge of computing infrastructure
   (???). 
   #+end_quote

3) "One sentence clearly stating the general *problem* being addressed
   by this particular study." (And how it was addressed.)

   #+begin_quote
   The problem is how to get enough of an overview of all of these
   aspects while learning about data science to solve real-world
   problems, especially for absolute beginners of data science
   (???). For this study, I have employed the (in computer science
   terms) ancient art of literate programming for instruction,
   interaction, and immersion in data science. To facilitate this
   triade of methods, the equally ancient text editor GNU Emacs with
   the ESS ('Emacs Speaks Statistics') and Org-mode plugins were used.
   #+end_quote

4) "Two or three sentences explaining what the main *result* reveals in
   direct comparison to what was thought to be the case previously, or
   how the main result adds to previous knowledge."

   #+begin_quote
   Data science teaching practice has focused on creating special
   tools like RStudio, a popular IDE for R, packages like the
   "Tidyverse", or online platforms like DataCamp to make learning
   data science (in this case via an R programming track) more
   palatable. Unfortunately, these parallel infrastructures achieve
   little when it comes to preparing students for the real world
   (???). The methodological attitude is well summarized by the "low
   code/no code" trend in IT (???).
   #+end_quote

5) "One or two sentences to put the results in a broader *context*."

   #+begin_quote
   We have used these methods for two consecutive terms across a
   spectrum of courses, with undergraduate students of varying
   seniority, background and interests at a small liberal arts
   college. The results were very encouraging, and contradict the
   current "no code/low code" trend in IT. In stark contrast, the
   study demonstrates that a "high road" approach mixing tools that
   are considered to be difficult but that deliver deep insights into
   both computing infrastructure and data processing, might be at
   least as successful if not more successful. Only followup studies
   can show if this hope will pan out.
   #+end_quote

** Lab session: Create/subset data frames
#+attr_html: :width 600px
[[../img/penguins.jpg]]

1) Get the raw file from GitHub: [[https://tinyurl.com/2hhwwtfh][tinyurl.com/2hhwwtfh]]
2) Save it as a practice Org-mode file to your PC
3) Complete the file on your own (or with thy neighbour)
4) Submit it in Canvas: [[https://lyon.instructure.com/courses/568/assignments/3541][Practice 8: Creating/subsetting data frames]]

This exercise involves:
- Creating data frame with ~data.frame~
- Storing a data frame as an R object
- Extracting values with ~$~, ~[]~ and ~subset~
- Indexing with ~which~ and ~colnames~
- Matching patterns with ~%in%~
  
** DataCamp assignment: lists (Oct 28)
#+attr_html: :width 500px
[[../img/certificate.png]]

- This is a very short lesson [[https://app.datacamp.com/learn/courses/free-introduction-to-r][in DataCamp]]
  
- You're now done with the "Introduction to R" DataCamp course

- Download the certificate and add it to your resume!

** Home assignment: explore data frame (Oct 31)
#+attr_html: :width 600px
[[../img/guineapigs.jpg]]

- This assignment is now live [[https://lyon.instructure.com/courses/568/assignments/3542][in Canvas]]

- You can submit for points at any time

- I will subtract 1 point per day for late submissions

** PROJECT [[https://github.com/birkenkrahe/db330/issues/44][DataCamp SQL webinar (Nov 8)]]
* Week 12: Basic plotting in R
#+begin_src R :results graphics file :file ../img/plotting.png
    plot(
      ToothGrowth$len ~ ToothGrowth$supp, # len vs. supp levels
      xlab="Supply level",  # x-axis label
      ylab="Tooth length (mm)", # y-axis label
      main="Length vs. Supply levels in ToothGrowth", # plot title
      las=1, # orient all labels horizontally
      xaxt="n") # remove x-axis values
    axis(side=1,
         at=1:2,
         labels=c("Orange Juice","Vitamin C"))
#+end_src
#+attr_html: :width 400px
[[file:../img/plotting.png]]

- [X] [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-keep-my-knowledge-of-r-current][New FAQ: how can you keep your R knowledge current?]]
- [X] Lecture/Practice: plotting in base R (and ggplot2)
- [ ] How to update R and R packages
** Command line update of R and packages ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-update-r-on-my-computer][FAQ]])
** Review assignment: explore real data frames

1) What's the length of the longest tooth recorded in ~ToothGrowth~?

   #+begin_src R
     str(ToothGrowth)
     max(ToothGrowth$len)
   #+end_src

   #+RESULTS:
   : 'data.frame':	60 obs. of  3 variables:
   :  $ len : num  4.2 11.5 7.3 5.8 6.4 10 11.2 11.2 5.2 7 ...
   :  $ supp: Factor w/ 2 levels "OJ","VC": 2 2 2 2 2 2 2 2 2 2 ...
   :  $ dose: num  0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 ...

2) How can you check if the ~supp~ variable in ~ToothGrowth~ is ordered?

   #+begin_src R
     is.ordered(ToothGrowth$supp)
   #+end_src

   #+RESULTS:
   : [1] FALSE
   
3) How can you create a histogram of the tooth lengths in ~ToothGrowth~?

   #+begin_src R
     hist(ToothGrowth$len)
   #+end_src

   #+RESULTS:

* Week 13: More plotting in R
#+attr_html: :width 300px
[[../img/vangogh.jpg]]
[[https://en.wikipedia.org/wiki/Sunflowers_(Van_Gogh_series)][Image: van Gogh's Sunflowers (1888), London]][fn:3]

 - [ ] *No class meeting on Veteran's day* (11-11 @11:11)
 - [ ] New test available [[https://lyon.instructure.com/courses/568/assignments/3545/edit?quiz_lti][in Canvas]]
 - [ ] New assignment: importing data [[https://lyon.instructure.com/courses/568/assignments/1533][in DataCamp]]
 - [ ] Review: 3rd sprint review
 - [ ] Plotting: ggplot2, pie charts, histograms
 - [ ] Final presentation 3 weeks away: think ahead!

* NEXT Comments: 3rd sprint review (abstract/results)
* NEXT Veterans'Day Celebration Nov 11, 11:11 hrs
#+attr_html: :width 400px
[[../img/LyonVeteranFlyer.jpg]]

- No class on November 11 at 11 AM
- Join us for the celebration & the BBQ
- Great keynote speaker (Brian Norris)
  
* Final sprint reviews (Nov 28, 30, Dec 2)
#+attr_html: :width 600px
[[../img/goya.jpg]]
[[https://www.museodelprado.es/en/the-collection/art-work/the-clothed-maja/a3121efc-6924-454c-8a9f-e4320f26d3d0][Image: The clothed Maja (Francisco de Goya, 1800, Prado Madrid)]]

- *Present* final project prototype in no particular order!
- *Submit* all material prior to the presentation!
- *Read* *[[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-should-we-prepare-for-the-final-presentation][the FAQ]]* with the checklist carefully *now*!

* References
#+attr_html: :width 500px
[[../img/books.jpg]]

Chambers J (2008). Software for Data Analysis - Programming with
R. New York: Springer. Online: [[https://doi.org/10.1007/978-0-387-75936-4][doi.org/10.1007/978-0-387-75936-4]]

* Footnotes

[fn:3]Can you figure out the connection between the three paintings
selected for this term's final presentation announcement? 

[fn:2]In the case of R, Norm Matloff is one of the greatest,
especially when it comes to parallelization of code, debugging, and
linking computer science and statistics, the author of a great
tutorial for beginners, [[https://github.com/matloff/fasteR][fasteR]]. Another one is Matt Dowle, the creator
of the [[https://github.com/Rdatatable/data.table][data.table package]].

[fn:1] In the case of R, John Chambers is a good starting point. Check
out his book ([[https://link.springer.com/book/10.1007/978-0-387-75936-4][Chambers, 2008]]) and this [[https://youtu.be/qWG_MLrxKps][2021 webinar by him]] (90 min)
which is based on his 2020 article [[https://dl.acm.org/doi/10.1145/3386334][S, R, and data science]].
