#+TITLE:Agenda - DSC 105
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Agenda - DSC 105 - Introduction to Data Science, Fall 2022
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
* README

- DSC 105 covers the basics of data science with R, simple
  visualization and productivity tools
- We use R as a language, GNU Emacs as editor, ESS as statistics
  extension, and Org-mode for literate programming
- For details on objectives, audience, grading, schedule, check the
  [[https://github.com/birkenkrahe/ds1/blob/piHome/org/syllabus.org][syllabus]] or the [[https://github.com/birkenkrahe/org/blob/master/FAQ.org][FAQ]] on GitHub.
- This file contains a (dynamically updated) agenda for each session
  as well as some content.
- You can also look at [[https://github.com/birkenkrahe/ds1/blob/piHome/org/agenda.org][the agenda on GitHub]].

* FAQ - Frequently Asked Questions

#+attr_html: :width 600px
#+caption: Three Spheres II, M.C. Escher (1946)
[[../img/escher.jpg]]

- [[https://github.com/birkenkrahe/org/blob/master/FAQ.org][Frequently Asked Questions @GitHub]]
- First place to go to with a general question
- FAQ is regularly updated with new content

* Week 1: Introduction to the course
** Objectives

- [X] Mutual introductions
- [X] Review: prerequisites (see email from July 18)
- [X] Review: Entry test
- [X] Lecture: Course overview
- [X] Practice: course infrastructure
- [X] First assignments and tests
- [ ] [[file:1_overview.org][Glossary]]

** Prerequisites
#+attr_html: :width 400px
#+caption:
[[../img/beatles.jpeg]]

#+begin_quote
"In DSC 105 (Introduction to data science), we'll start with R from
scratch - no need to prepare unless you want to. If you already took
DSC 101 in fall 2021, you do not need to take this course. If you took
DSC 205 in spring 2022, you will experience some repetition. Textbook:
Book of R, Part I (ch. 1-8), by T D Davies (NoStarch, 2016)."
#+end_quote

- General preparation: [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-can-i-prepare-for-your-data-science-classes][see the FAQ]] - R, Emacs + ESS + Org-mode

#+begin_notes
In London in 1962, the Beatles failed a major audition with music
producers, who committed a Type II statistical error: their null
hypothesis was that guitar groups are no longer popular, and should
have been rejected.
#+end_notes

** Assignments for next week

- By Monday Aug 22, 11 am: [[https://lyon.instructure.com/courses/568/assignments/1609/edit?quiz_lti][Test 1 (Course infrastructure)]] - you
  complete this 5-question quiz in Canvas.

- By Monday Aug 22, 11 am: [[https://lyon.instructure.com/courses/568/assignments/1420][Introduction to data science (DataCamp)]] -
  you have to register with DataCamp and join the Lyon fall '22 group.

- By Wednesday Aug 24, 11 am: Enter a project idea and team member
  names, and your question(s) [[https://lyon.instructure.com/courses/568/pages/enter-your-project-idea-and-participants-here][in this table in Canvas]].

- By Friday Aug 26, 11 am: [[https://lyon.instructure.com/courses/568/assignments/1436][GNU Emacs online tutorial]] - you need to
  alter, save and submit the tutorial in Canvas. You should also get
  Emacs + ESS for your PC.

- For general questions, you can use the Google chat for this course
  (invitation only)

- Get the mobile app! (Canvas student)

  #+attr_html: :width 300px
  [[../img/mobile.png]]

** Practice - course infrastructure

*IF YOU ALREADY DID THIS IN ANOTHER CLASS: FINISH THE EMACS TUTORIAL!*

*Useful:* take notes! Practice leads to mastery and the practice
nexercises will often come back to haunt you in the tests.

1) Open a browser
2) Find the GitHub repos (birkenkrahe/dviz and /org)
3) Open the command line terminal
4) Open/close R
5) Open Emacs
6) Find the Emacs tutorial
7) Open/close R inside Emacs
8) Run R in an Org-mode file
9) Close Emacs
10) Close the command line terminal

Note: Class room practice completion = 10 points each for active
participation (if there's a practice file, you can make up).

([[https://github.com/birkenkrahe/ds1/blob/piHome/org/1_practice.org][Link to practice file in GitHub]])

* Week 2: Getting started

-*START BBB RECORDING*-

- [X] Quiz 1: course infrastructure
- [X] Team projects: getting ready for 1st sprint review
- [X] Lecture: Introduction to data science
- [X] Lecture/practice: Introduction to R
- [X] Practice: Running R in an Emacs Org-mode file
- [X] Practice: Introduction to R

** DONE Home assignments - how they work
#+attr_html: :width 400px
#+captions: course infrastructure
[[../img/platforms.png]]

- Assignment is posted on [[https://lyon.instructure.com/courses/568/assignments/1435][Canvas]] (includes the link)
- Assignment must be completed on time on [[https://app.datacamp.com/groups/lyon-college-data-science-fall-2022/assignments][DataCamp]]
- You loose 1 point for every day of late submission
- Canvas Gradebook is updated manually (with some delay)

** DONE Team projects - check in
#+attr_html: :width 600px
[[../img/scrum.jpg]]

- Course has grown to 15 participants!
- You'll have to do the project in a team - 2 to 3 people
- I can only accommodate at most 9 projects (last week of term)
- Put your team/ideas into this table ([[https://lyon.instructure.com/courses/568/pages/enter-your-project-idea-and-participants-here][Canvas]]) by Wednesday

- [X] *Who has not yet found a team?*
- [X] *Who has a team but no idea what to do?*

** DONE DataCamp assignment: What Is Data Science?

- Data science definition biased towards Machine Learning
  #+attr_html: :width 600px

[[../img/power.png]]

- What do you think about the claim:

  /"Programming languages are like power tools"/

- What follows if this claim is true? What if it isn't?

** DONE [[https://github.com/birkenkrahe/ds1/blob/piHome/pdf/1_skills.pdf][What are your skills? (Mon 22-Aug)]]

** DONE 1st sprint review - Wed 31-Aug

- [[https://lyon.instructure.com/courses/568/assignments/1438][Canvas assignment with submission]]

- Complete [[https://lyon.instructure.com/courses/568/pages/enter-your-project-idea-and-participants-here][projects overview table]] in Canvas *today*!

- If you are in > 1 course, you can use the same project idea!

** DONE Test 2 open ("What is data science?")

** DONE Project idea: compare base-R and "Tidyverse"

- Base-R is the foundation software from CRAN (the one you're using)
- "Tidyverse" is a popular bundle of packages (like ~dplyr~)
- The project would consist of comparing both with examples, along the
  lines of Matloff's "[[https://github.com/matloff/TidyverseSkeptic][TidyverseSceptic]]" essay (see also recent [[https://github.com/matloff/TidyverseSkeptic/blob/master/RDesign.pdf][update]])

** DONE Practice: Run R in Org-mode file

- [[https://github.com/birkenkrahe/ds1/blob/piHome/org/1_overview_practice.org#run-r-in-org-mode-file][Instructions in GitHub]]
- Update your Emacs configuration file
- Check that you can run R inside Emacs

** IN PROGRESS Lecture/practice: introduction to R

1) [[https://github.com/birkenkrahe/ds1/blob/piHome/org/3_introR_practice.org][Download the file]]
2) Complete the file
3) Nothing to upload

* Week 3: Introduction to R
#+attr_html: :width 500px
[[../img/online.jpg]]


- [ ] [[file:~/Documents/R/ds1/3_introR_practice.org][Complete introR practice file]]
- [ ] Lecture & practice: arithmetics in R
- [ ] DataCamp assignment "[[https://app.datacamp.com/learn/courses/free-introduction-to-r][Intro to basics]]"

** DataCamp assignment "Intro to basics"

- Always try stuff on your own (using the console or Emacs)
- R as a scientific calculator
- Assignment operators ~<-~, ~=~, ~->~
- ~ls()~ function (list defined R objects)
- Review: how do you add two variables ~x~ and ~y~?
- Tip: you can use ~;~ to add commands on one line
- Review: which data types does R have?
- Useful functions: (object) ~class~, (storage) ~mode~ (or ~typeof~)

  #+begin_src R :session *R* :result outout
    foo <- "a"; foo
    typeof(foo)
    typeof(x)
  #+end_src

  #+RESULTS:
  : double

** READ Monday Aug 29 last day to drop class

[[../img/drop.png]]

(https://my.lyon.edu/ICS/Academics/Student_Forms.jnz)

** GNU Emacs: ref cards
#+attr_html: :width 400px
[[../img/gnu.jpg]]

- [ ] The power of Dired on one page ([[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][v28]])
- [ ] The power of Emacs on two pages ([[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][v27]])

** Review: [[https://lyon.instructure.com/courses/568/assignments/1452][test 2 - what is data science?]]

- *Which skills are relevant for data science?*
  + Customer service skills is a general people skill, not specific to
    data science
  + Database management is a general IT skill, not specific to data
    science
  + "Sales knowledge" is domain knowledge, and actually not a skill
P    (bad phrasing of the question on my part)
+ All skills and all knowledge can of course be brought to bear on
  data science, which means this is not a very well focused question

- *Which of these are part of the typical data science process?*
  + The typical data science process does not involve "machine
    learning" (ML). ML is a specific data science application.
  + Coding is a skill

- Data science as a *discipline* is neither very immature (undefined)
  nor very mature (standardized). It's changing so fast that its
  "maturity" is difficult to assess

- *Purpose of Scrum:* team and customer happiness are not suitable
  goals, because 'happiness' is highly subjective - too hard to define
  and measure (it's marketing and sales lingo)

- *Coding*, though still relevant and important, is no longer the most
  important skill for data scientists

* Week 4: Arithmetics in R
#+attr_html: :width 300px
[[../img/numbers.jpg]]

- [X] Emacs + Org-mode + ESS
- [X] Review test 3
- [X] Review 1st sprint review
- [X] Review vectors in R (1)
- [X] Practice: introduction to R
- [X] Arithmetics in R (lecture + practice)

** DONE [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-do-emacs--org-mode--ess-work-work-together][How Emacs, Org-mode and ESS work together]]

#+attr_html: :width 500px
[[../img/emacsorg.png]]

** DONE Review: test 3 - getting started with R

- What does ~help(x)~ do in R?
  - To access web pages on a device that device needs to run a web server
  - Apache web server (FOSS)
  - XAMPP from https://www.apachefriends.org/

- What type of argument does ~install.packages~ require?
  - e.g. installing ~MASS~: ~install.packages("MASS")~

- What is the difference between ~Rscript~ and ~R CMD BATCH~?

** DONE Review: 1st sprint review
#+attr_html: :width 400px
[[../img/pitchers.png]]

- What is a *reference*? What do I have to reference?
  1) All sources (incl. personal comm., incl. software like R)
  2) *Author(s)*, *Date of publication*, *Place of publication*, *Title*
  3) References need to be consistent and complete
- What do you think of [[https://www.marktechpost.com/2022/08/14/top-data-visualization-tools-for-data-science-and-analytics/][this reference]] in particular?

- Excellent *questions* for other teams (Kim/Balah/Boogie):
  1) Where and how did you find your data?
  2) What was challenging about picking your topic?

** DONE Better next time!
#+attr_html: :width 500px
[[../img/1_scrum.png]]

- *SUMMARY:*
  1) deliver more than the bare minimum
  2) work systematically, gather and list your references
  3) split up the work if you work in a team
  4) ask me for support before the sprint review deadline
  5) reflect on your project process and project success

** DONE Review: DataCamp chapter "[[https://lyon.instructure.com/courses/568/assignments/1437][Vectors in R]]" (1)

The first part of the review deals with vector data types and names.

1) There is no "Boolean" type in R, but ~logical~ instead, e.g. for the
   value ~TRUE~. How can I show this?

   #+begin_src R
     class(TRUE)
   #+end_src

   #+RESULTS:
   : logical

2) How can I turn ~TRUE~ in a vector named ~bool~?

   #+begin_src R :results output
     bool <- c(TRUE)
     bool
   #+end_src

   #+RESULTS:
   : [1] TRUE

3) How can I make sure it's a vector?

   #+begin_src R :results output
     bool <- c(TRUE)
     is.vector(bool)
   #+end_src

   #+RESULTS:
   : [1] TRUE

4) Is ~bool~ a named vector? How do I know?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool)
   #+end_src

   #+RESULTS:
   : NULL

5) If ~bool~ is not named, how can I name it?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool) <- "Nick"
     names(bool)
     bool
   #+end_src

   #+RESULTS:
   : [1] "Nick"
   : Nick
   : TRUE

** DONE Solutions

1) There is no "Boolean" type in R, but ~logical~ instead, e.g. for the
   value ~TRUE~. How can I show this?

   #+begin_src R
     class(TRUE)
   #+end_src

2) How can I turn ~TRUE~ in a vector named ~bool~?

   #+begin_src R :results output
     bool <- c(TRUE)
     bool
     class(bool)
   #+end_src

   #+RESULTS:
   : [1] TRUE
   : [1] "logical"

3) How can I make sure it's a vector?

   #+begin_src R
     bool <- c(TRUE)
     is.vector(bool)
   #+end_src

   #+RESULTS:
   : TRUE

4) Is ~bool~ a named vector? How do I know?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool)
   #+end_src

   #+RESULTS:
   : NULL

5) If ~bool~ is not named, how can I name it?

   #+begin_src R :results output
     bool <- c(TRUE)
     names(bool) <- "Joey"
     bool
     names(bool)
   #+end_src

   #+RESULTS:
   : Joey
   : TRUE
   : [1] "Joey"

** DONE Practice: Introduction to R (customization)

#+attr_html: :width 500px
[[../img/3_play.jpg]]

** NEXT DataCamp assignment: "[[https://lyon.instructure.com/courses/568/assignments/1439][Matrices in R]]" (Sept 14)
* Week 5: Vectors in R
#+attr_html: :width 300px
[[../img/queen1.jpg]]

- [X] Review DataCamp vectors in R (2)
- [ ] Featured applications: automation, Python, learning
- [ ] Continued: Arithmetic in R (lecture/practice)
- [ ] Vectors in R
- [ ] Review test 4 - arithmetic in R

* DONE Review: DataCamp chapter "Vectors in R" (2)

1) How can you add ~c(1,2,3)~ and ~c(4,5,6)~?

   #+begin_src R :results output
     ## save vectors as R objects (variables)
     foo <- c(1,2,3)
     bar <- c(4,5,6)

     ## add vectors as they are
     c(1,2,3) + c(4,5,6)

     ## add vectors as variables
     foo + bar

     ## add vectors by hand
     c(1 + 4, 2 + 5, 3 + 6)
   #+end_src

   #+RESULTS:
   : [1] 5 7 9
   : [1] 5 7 9
   : [1] 5 7 9

2) What happens if you add a named and an unnamed vector?

   #+begin_src R :results output
     foo <- c("i"= 1, "j" = 2, "k" = 3)
     bar <- c(4,5,6)
     names(foo)
     names(bar)
     foo + bar
     names(foo + bar)
   #+end_src

   #+RESULTS:
   : [1] "i" "j" "k"
   : NULL
   : i j k
   : 5 7 9
   : [1] "i" "j" "k"

   Adding vectors of different length:
   #+begin_src R :results output
     foo <- c(1,2)
     bar <- c(1,2,3,4)
     foo + bar
   #+end_src

   #+RESULTS:
   : [1] 2 4 4 6

3) What is the result of comparing ~c(1,2,3)~ and ~c(4,5,6)~ using
   relational operators ~>~ and ~<~ ?

   #+begin_src R :results output
     c(1,2,3) > c(4,5,1)
     c(0,5,6) > c(1,2,3)
   #+end_src

   #+RESULTS:
   : [1] FALSE FALSE  TRUE
   : [1] FALSE  TRUE  TRUE

4) How can you add the first and second value of ~baz <- c(2,2)~?

   Parentheses suggest that ~baz~ is a function - this is not it:
   #+begin_src R :results output
     baz(1) + baz(2)
   #+end_src

   #+begin_src R :results output
     baz <- c(2,2)
     baz[1] + baz[2]
   #+end_src

   #+RESULTS:
   : [1] 4

5) What happens if you get it wrong, and you try to add a value that's
   not there?

   #+begin_src R :results output
     foo <- c(1)
     foo[1]
     foo[2]
     foo[1] + foo[2]
   #+end_src

   #+RESULTS:
   : [1] 1
   : [1] NA
   : [1] NA

6) What does ~qux[c(1:3)]~ mean?

   #+begin_src R :results output
     qux <- c(10,100,1000)
     qux[1]; qux[2]; qux[3] # print individual values
     qux[c(1,2,3)]  # print values using index vector
     qux[c(1:3)]
   #+end_src

   #+RESULTS:
   : [1] 10
   : [1] 100
   : [1] 1000
   : [1]   10  100 1000
   : [1]   10  100 1000

7) How can you extract elements from ~qux~ that are greater than 100?

   #+begin_src R :results output
     qux <- c(10,100,1000)

     ## This generates an index or selection vector
     qux > 100

     ## Values of qux greater than 100
     qux[qux > 100]

     ## same as
     qux[c(F,F,T)]

     ## Index of extracted values
     which(qux > 100)

     qux[which(qux>100)] # resolves to qux[3]
   #+end_src

   #+RESULTS:
   : [1] FALSE FALSE  TRUE
   : [1] 1000
   : [1] 1000
   : [1] 3
   : [1] 1000

* IN PROGRESS Arithmetics in R - lecture & practice

#+attr_html: :width 700px
[[../img/setup.png]]

- Download/open the Org-mode file from GitHub: [[https://tinyurl.com/4dekhhw5][tinyurl.com/4dekhhw5]]

- Put your name and ~[pledged]~ next to it in the meta data header

- Open an R console inside Emacs with ~M-x R~

- We'll go back and forth between lecture and practice file

- You can change between Emacs buffers with ~C-x o~ (~other window~)

- You can look at a list of all your open buffers with ~C-x C-b~

- You can go back to the last visited buffer with ~C-x b~

- You can cycle through buffers with your mouse (on the buffer title)

* Featured applications (R and around R)

[[https://github.com/birkenkrahe/ds1/issues][See GitHub issues list]]:
- Automate tasks with R (using UNIX' cron(1))
- Python vs. R by IBM (7 min)
- Learning a new programming language (8 min)

#+attr_html: :width 500px
[[../img/horizon.jpg]]

#+begin_quote
Frank Stajano: /"The single most important factor of your learning
success is that you enjoy and would do it for its own sake."/
#+end_quote

1) Understand how you learn and choose resources that support your
   *learning style*
2) Set your own *incentives* and *goals* that you like and stage them as
   stepping stones
3) Learn from the *best* - check competence of authors, e.g. to learn a
   language, grab the book written by the author[fn:1], and study
   conventions of great programmers in that language[fn:2].

* TODO Review test 4

1) What is ~log(1)~ independent of the base parameter
2) What are exponentiation operators in R
3) What's the difference: ~log(base=10,x=100)~ vs. ~log(x=100,base=10)~
4) What's ~format(271.82e-2, scientific=FALSE)~
5) What's ~-4**2 + 2~ vs ~(-4)**2 + 2~
6) What is ~sqrt(2)^2 == 2~
7) What is ~all.equal(exp(3000),Inf)~
8) What is ~identical(exp(3000),Inf)~
9) What are the special values in R? Are they all numeric?
10) What's ~NA+1~
11) What's ~NA**0~
12) What's ~mean(1,3)~
13) What are the elements of a complete reference?
14) How can you find out what is ~$HOME~ to Emacs?
    #+attr_html: :width 600px
    [[../img/emacshome.png]]
15) How can you make sure that the R session runs in Emacs' ~$HOME~?
    #+attr_html: :width 600px
    [[../img/setwd.png]]

#+begin_src R :results output
  log(1)
  format(271.82e-2, scientific=FALSE)
  -4**2 + 2
  (-4)**2 + 2
  all.equal(exp(3000),Inf)
  identical(exp(3000),Inf)
  exp(709.7)
  class(NaN)
  class(NA)
  class(Inf)
  NA+1
  NA**0
  mean(c(1,3))
  mean(1,3)
#+end_src

#+RESULTS:
#+begin_example
[1] 0
[1] "2.7182"
[1] -14
[1] 18
[1] TRUE
[1] TRUE
[1] 1.654984e+308
[1] "numeric"
[1] "logical"
[1] "numeric"
[1] NA
[1] 1
[1] 2
[1] 1
#+end_example

* IN PROGRESS R's workhorse: Vectors in R
#+attr_html: :width 600px
[[../img/5_workhorse.png]]

* References

Chambers J (2008). Software for Data Analysis - Programming with
R. New York: Springer. Online: [[https://doi.org/10.1007/978-0-387-75936-4][doi.org/10.1007/978-0-387-75936-4]]

* Footnotes

[fn:2]In the case of R, Norm Matloff is one of the greatest,
especially when it comes to parallelization of code, debugging, and
linking computer science and statistics, the author of a great
tutorial for beginners, [[https://github.com/matloff/fasteR][fasteR]]. Another one is Matt Dowle, the creator
of the [[https://github.com/Rdatatable/data.table][data.table package]].

[fn:1] In the case of R, John Chambers is a good starting point. Check
out his book ([[https://link.springer.com/book/10.1007/978-0-387-75936-4][Chambers, 2008]]) and this [[https://youtu.be/qWG_MLrxKps][2021 webinar by him]] (90 min)
which is based on his 2020 article [[https://dl.acm.org/doi/10.1145/3386334][S, R, and data science]].
