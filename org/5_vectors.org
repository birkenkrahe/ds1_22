#+TITLE: VECTORS in R
#+AUTHOR: Introduction to data science (DSC 105) Fall 2022
#+startup: hideblocks indent overview inlineimages
#+attr_html: :width 700px
[[../img/5_workhorse.png]]

* What will you learn?
#+attr_html: :width 500px
[[../img/5_workhorse.jpg]]

After this lesson, you should be able to:

- Understand assignment in R
- Creating vectors, sequences and repetitions
- Sorting and measuring vector length
- Subsetting and extracting vector elements
- Vectorizing (rescaling)
- Classes and logical vectors

/Most sections are accompanied by YouTube videos./

* Everything is an object

- R is a functional, object-oriented language

- There are usually many different ways to achive the same result

- Different solutions differ in: performance, clarity, ease of use

- PERFORMANCE: important for large data sets only

- CLARITY: essential wen communicating methods, code, results

- EASE OF USE: determines the fun you have when programming

[[https://www.youtube.com/playlist?list=PL6SfZh1-kWXl3_YDc-8SS5EuG4h1aILHz][[Watch YouTube Playlist​]​]]

[[https://youtu.be/7Ab2RQs7Lj8][[Watch the video (4:33 min)]​]]

#+begin_notes
R is a functional, object-oriented language: everything's an object,
and functions rule, as you already know. Because functions rule,
there are usually many different ways to achieve the same
result. They often differ in terms of performance, ease of use, and
clarity. Performance becomes important when you work with truly
large data sets, otherwise not so much. Ease of use to some extent
determines the fun you do or don't have when using the
language. Clarity is essential when communicating your methods
(including your code) and your results to others. This is not a nice
to have. Views of different packages (like the Tidyverse) differ
massively regarding all of these.
#+end_notes

* Assigning objects

[[https://youtu.be/WZqJ_AyoOEU][[Watch the video (10 min)]​]]

We talk about "assigning values to a variable" or "storing values
in a variable." These expressions are interchangeable. We can use
~<-~ or ~=~ for assignment. Whatever you do, try to be consistent.

1) Create an object ~a~ that stores the value $3^2\times 4^\frac{1}{8}$
2) Overwrite ~a~ with itself divided by $2.33$. Print the result to
   the console.
3) Create a new object ~b~ with the value $-8.2\times 10^{-13}$
4) Print to the console the result of multiplying ~a~ and ~b~.

#+begin_notes
Because you can overwrite variables easily, ~=~ could be confusing,
because it looks like mathematical equality (a status) while it
actually is an action. ~=~ is usually reserved for setting arguments
inside functions. You've seen this before: ~log(x=100, b=10)~.

There are also some naming rules: objects must start with a letter
and they must avoid reserved words (like ~TRUE~ or
~NA~). Interesting objects for us include: vectors, factors, and
data frames.
#+end_notes

#+begin_notes
#+begin_src R :session
  a <- 3^2 * 4^(1/8)  # 1) 10.70286
  a <- a/2.33         # 2) 4.593504
  a
  b <- (-8.2) * 10^(-13) # 3) -8.2e-13
  a * b                  # 4) -3.766673e-12
#+end_src

The session results:
#+begin_example
> a <- 3^2 * 4^(1/8)
> a <- a/2.33
> a
[1] 4.593504
> b <- (-8.2)*10^(-13)
> b
[1] -8.2e-13
> a * b
[1] -3.766673e-12
#+end_example
#+end_notes

* Why we need vectors
[[https://youtu.be/iFsB_34mnR0][[Watch the video (6:40)]​]]

- We need vectors to handle multiple items in R
- Vectors contain observations or measurements of a single variable
- Each vector can have only one data type - e.g. ~numeric~

#+begin_notes
We need vectors to handle multiple items in R (more than one data
point). Interesting data are usually made up of multiple
items. Think of a vector as a collection of observations or
measurements concerning a single variable. An important condition
for vectors is that all entries must be observations of the same
type[fn:1].
#+end_notes

1) Give three examples of such collections for vectors:
   - numbers, e.g. the heights of students in this class
   - text, e.g. the names of students of this class
   - logical values, e.g. sex of students of this class

2) Define sample vectors ~s_heights~, ~s_names~ and ~s_male~

3) Print the vectors

#+begin_notes
*SOLUTION*
#+begin_quote
1) the heights of every student of this class, in cm.
2) the first names of every student of this class (strings).
3) observations, if a student is male or not male (male means ~TRUE~).
#+end_quote
Let's put some wood behind the arrow and define sample vectors for these:
#+begin_src R :session :results output
  s_heights <- c(180, 181, 158, 175, 179, 168)
  s_names <- c("Vincent", "Natalija", "Adrian", "Andres", "Helena")
  s_male <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
#+end_src
#+end_notes

* R object ~class~

- The function ~class~ (check the help) returns the R object type

- Let's check the class for our three vectors with student data

#+begin_notes
In order to check what R thinks about your observation or data type,
you can use the function ~class~. Look at the help page for details
and enter the examples at the bottom of the help page.

Let's call ~class~ for our three sample vectors:
#+begin_src R :session :results output
  class(s_heights) # what type vector is this?
  class(s_names)   # what type vector is this?
  class(s_male)    # what type vector is this?
#+end_src
The resulting session output:
#+begin_example
> class(s_heights)
[1] "numeric"
> class(s_names)
[1] "character"
> class(s_male)
[1] "logical"
#+end_example
#+end_notes

* Creating vectors

[[https://youtu.be/Ov6SIrpY_io][[Watch the video (5:11)]​]]

- The function to create a vector, or "combine values", is ~c()~:
  #+begin_src R :session
    myvec <- c(1,3,1,42) # combine integers as vector
    myvec                # prints 1 3 1 42
    class(myvec)         # determine the data type - "numeric"
  #+end_src

- Vector elements can be calculations or previously stored items:
  #+begin_src R :session :results output
    foo <- 32.1
    myvec2 <- c(3, -3, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44, foo)
    myvec2
  #+end_src

- Vector elements can even be vectors themselves:
  #+begin_src R :session :results output
    myvec3 <- c(myvec, myvec2)
    myvec3
    class(myvec3)
  #+end_src

- In the resulting output, the two vectors were put side by side. The
  new vector now has 11 = 4 + 7 elements

- [ ] What about missing values, ~NA~, and non-numbers, ~NaN~, and what
  about the special values ~Inf~ and ~-Inf~ - can you have these in
  vectors, too? Can you think about a way to test this?

  #+begin_notes
  *Solution:*
  #+begin_src R
    > specvec <- c(NA, NaN) # a vector with a NA and a NaN
    > specvec
    [1]  NA NaN
    > class(specvec)
    [1] "numeric"
    > is.nan(specvec)  # testing for NaN values
    [1] FALSE  TRUE
    > is.na(specvec)   # testing for NA values
    [1] TRUE TRUE
    > specvec1 <- c(specvec, Inf, -Inf) # a new vector with Inf, Inf
    > specvec1
    [1]   NA  NaN  Inf -Inf
    > is.finite(specvec1)  # testing for finiteness
    [1] FALSE FALSE FALSE FALSE
    > is.infinite(specvec1)  # testint for infiniteness
    [1] FALSE FALSE  TRUE  TRUE
    > class(specvec1)
    [1] "numeric"
  #+end_src
  #+end_notes

* Example: down the nile

[[https://youtu.be/wwsD2KuoKt8][[Watch the video (4:33)]​]]

- Let's not forget that there are real data out there!
- R (i.e. "[[https://rstudio.com/wp-content/uploads/2016/05/base-r.pdf][Base-R]]") includes a number of built-in datasets

#+begin_quote finding datasets
Do you remember how to find these pre-loaded datasets? One of these
is ~Nile~. Do you remember how to get information on such a dataset
(or on any R object)?
#+end_quote

#+begin_notes
*Solution:*
#+begin_src R :session
  data()      # lists all available/loaded datasets
  ?Nile       # opens help page for the dataset Nile
#+end_src
#+end_notes

- ~Nile~ contains a so-called "time series", a sequence of numbers that
  correspond to measurements of the annual flow (in billion - 10⁸ -
  cubic meters) of the river Nile at [[https://en.wikipedia.org/wiki/Aswan][Aswan]], measured between
  1871-1970. You can use ~class~ to confirm it:

  #+begin_src R :session
    class(Nile)  # what type of dataset is this?
  #+end_src

  #+begin_notes
  The output is ~"ts"~ or time series. You may remember that we
  previously looked at large datasets. ~mtcars~ for example was a
  "data frame" (we'll learn more about them later).
  #+end_notes

- How can we print this dataset on the screen?

  #+begin_notes

  *Solution:* there are different ways to look inside ~Nile~:
  #+begin_src R :session
    str(Nile)   # show dataset structure
    head(Nile)  # show first few elements
    Nile        # this prints the whole dataset
  #+end_src

  Results from the session:
  #+begin_example
  > str(Nile)
  Time-Series [1:100] from 1871 to 1970: 1120 1160 963 1210 1160 1160 813 1230 1370 1140 ...
  > head(Nile)
  [1] 1120 1160  963 1210 1160 1160
  > Nile
  Time Series:
  Start = 1871
  End = 1970
  Frequency = 1
  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020
  [16]  960 1180  799  958 1140 1100 1210 1150 1250 1260 1220 1030 1100  774  840
  [31]  874  694  940  833  701  916  692 1020 1050  969  831  726  456  824  702
  [46] 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759
  [61]  781  865  845  944  984  897  822 1010  771  676  649  846  812  742  801
  [76] 1040  860  874  848  890  744  749  838 1050  918  986  797  923  975  815
  [91] 1020  906  901 1170  912  746  919  718  714  740
  #+end_example

  Because we don't know yet how to look at sub-vectors or individual
  vector elements, we cannot directly check what type the elements of
  ~Nile~ have, but the output seems to suggest that the Nile flow is
  measured in integer numbers.

  You can also see from the print output of ~Nile~ how row labels
  work: there are 15 numbers per row, and the second row starts with
  the 16th number, indicated by ~[16]~.
  #+end_notes

* NEXT Plotting the nile
[[https://youtu.be/c_BvsnKU7T4][[Watch the video (4:10)]​]]
-----
Looking at the numbers otherwise won't give us any idea about what's
going on, but fortunately, R has amazing plotting
capabilities. Let's begin with a histogram, for which we need the
~hist~ function.

*Problem:*
#+begin_quote
What does ~hist~ do? How does it work?
#+end_quote

*Solution:*
#+begin_quote
You know of course what to do at this point: call for help using
~?hist~. Skip to the ~Examples~ section at the end, where you find
the command ~hist(islands)~. This creates a histogram of another
dataset, ~islands~. With the help of ~?islands~, you find out
quickly that this is a "named vector of 48 elements". Never mind
what this means, but you can enter the command, which will generate
a plot. This is a histogram: it plots frequency of the data and
distributes them into bins[fn:2]. Let's get back to the river Nile...
#+end_quote

Like most R functions, ~hist~ has many options. If you execute
~hist(Nile)~, you get the same type of graph as in the example (see
figure [[fig:hist_nile]]), except that we know what the data are (annual
Nile flow measurements in ~10⁸ m³~, or 100,000,000 (100 million) of
cubic metres.

#+CAPTION: Histogram of Nile - distribution of flow.
#+NAME: fig:hist_nile
[[./img/nile_hist.png]]

The ~hist~ function creates 10 bins by default and distributes the
data accordingly. You can alter this number of bins by changing the
argument ~breaks~, e.g. ~hist(Nile, breaks=20)~ (try it!).

We'll get back to the ~Nile~ once we know more about vectors! In the
next four sections, we're going to look at useful functions.
* TODO The obvious
In the following, I won't waste more space with the obvious:
whenever I mention a new function or dataset, or keyword, look the
corresponding help up immediately. More often than not, you will
take something away from it - at the very minimum an example. Over
time, you'll understand things even though you don't know how you
possibly could: this is because you've begun to develop a habit by
using a system of learning - looking up the help content - and the
more you look at help pages, the more you recognize known concepts.
* TODO Creating sequences and repetitions

[[https://youtu.be/G2P_MVq3eyM][[Watch the video (16:05)]​]]

* TODO The colon operator
We already met the colon operator: remember how ~1:n~ creates a
sequence of numbers separated by intervals of ~1~:
#+begin_src R :session :results output
  3:27  # generate sequence of integers space by 1 from 3 to 27
#+end_src
The output looks like this:
#+begin_example
  R> 3:27
  [1]  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
#+end_example
Simple enough! You'll need this e.g. when plotting data points. You
can check that these are integer numbers with ~class(3:27)~. You can
also store the sequence, or use arithmetic to specify the range. Any
calculation must strictly be in parentheses:
#+begin_src R :session :results output
  foo <- 5.3              # assign 5.3 to foo
  bar <- foo:(-47+1.5)    # assign sequence to bar
#+end_src
The sequence ~bar~ looks like this:
#+begin_example
R> bar
  [1]   5.3   4.3   3.3   2.3   1.3   0.3  -0.7  -1.7  -2.7  -3.7  -4.7  -5.7
 [13]  -6.7  -7.7  -8.7  -9.7 -10.7 -11.7 -12.7 -13.7 -14.7 -15.7 -16.7 -17.7
 [25] -18.7 -19.7 -20.7 -21.7 -22.7 -23.7 -24.7 -25.7 -26.7 -27.7 -28.7 -29.7
 [37] -30.7 -31.7 -32.7 -33.7 -34.7 -35.7 -36.7 -37.7 -38.7 -39.7 -40.7 -41.7
 [49] -42.7 -43.7 -44.7
#+end_example
Try to understand what happened here by checking the numbers: the
first value of the sequence is ~foo = 5.3~. The last value is a
negative value, ~-47+1.5 = -45.5~. In order to generate the
sequence, R counts down in steps of ~1~ from the first to the last
value. It stops at ~-44.7~, because the next value, ~-45.7~ would be
outside of the interval $[5.3,-45.5])$.

So far so good, but this isn't very flexible, because we cannot
alter the "bin-size" (in histogram-speak), or the step-width of the
sequence generator - it'll always be $1$. We need a function!
* TODO Sequences
The function ~seq~ "generates regular sequences" (that's what the
help says, which I am sure you looked up as soon as you saw the
headline!). Alas, the help is a little obscure (esp. the
examples). Let's make our own examples, or borrow them[fn:3]: here
is a variation on the last example, with step-width specified via
the argument ~by = 3~:
#+begin_example
R> seq(from = 3, to = 27, by = 3)
[1]  3  6  9 12 15 18 21 24 27
#+end_example
~seq~ will always start at the ~from~ value but (just like in the
earlier example) not always end exactly on the ~to~ value. In the
following example, the last value ~10~ is not included, because it
both last value and step-width are even. In the second example, the
last value is odd, and then it works:
#+begin_example
R> seq(1,10,2)
[1] 1 3 5 7 9

R> seq(1,11,2)
[1]  1  3  5  7  9 11
#+end_example
To end exactly on the last value, use the ~length.out~ argument
instead:
#+begin_example
R> seq(from = 3, to = 27, length.out = 40)
[1]  3.000000  3.615385  4.230769  4.846154  5.461538  6.076923  6.692308
[8]  7.307692  7.923077  8.538462  9.153846  9.769231 10.384615 11.000000
[15] 11.615385 12.230769 12.846154 13.461538 14.076923 14.692308 15.307692
[22] 15.923077 16.538462 17.153846 17.769231 18.384615 19.000000 19.615385
[29] 20.230769 20.846154 21.461538 22.076923 22.692308 23.307692 23.923077
[36] 24.538462 25.153846 25.769231 26.384615 27.000000
#+end_example
The intervals between the ~40~ values generated are exactly evenly
spaced. If you want the sequence to decrease, ~by~ must be
negative, like here:
#+begin_example
  > foo <- 5.3
  > myseq <- seq(from=foo, to=(-47+1.5),by=-2.4)
  > myseq
  [1]   5.3   2.9   0.5  -1.9  -4.3  -6.7  -9.1 -11.5 -13.9 -16.3 -18.7 -21.1
  [13] -23.5 -25.9 -28.3 -30.7 -33.1 -35.5 -37.9 -40.3 -42.7 -45.1
#+end_example
~length,out~ can only be positive (there is no 'negative
length'). This example creates a decreasing sequence of length $5$:
#+begin_example
  > myseq2 <- seq(from=foo, to=(-47+1.5), length.out=5)
  > myseq2
  [1]   5.3  -7.4 -20.1 -32.8 -45.5
#+end_example
* TODO Repetition
If you simply want to repeat a value, you can use the ~rep~
function. For example, to create a sequence of four numbers ~1~, type:
#+begin_example
R> rep(x=1, times=4)
[1] 1 1 1 1
#+end_example
You can repeat any object! Here are three different repetitions of
the numerical vector ~c(3, 62, 8, 3)~ - first guess the outcome,
then type them into the R console to check your thinking:
#+begin_src R :session :results output
  rep(x=c(3,62,8,3), times=3)
  rep(x=c(3,62,8,3), each=2)
  rep(x=c(3,62,8,3), times=3, each=2)
#+end_src
The argument ~times~ says how many *times* ~x~ is repeated. The
argument ~each~ says how many times *each* element of ~x~ is
repeated. The output should look like this:
#+begin_example
R> rep(x=c(3,62,8,3), times=3)
[1]  3 62  8  3  3 62  8  3  3 62  8  3

R> rep(x=c(3,62,8,3), each=2)
[1]  3  3 62 62  8  8  3  3

R> rep(x=c(3,62,8,3), times=3, each=2)
[1]  3  3 62 62  8  8  3  3  3  3 62 62  8  8  3  3  3  3 62 62  8  8  3  3
#+end_example
If neither are specified, the default is ~times = each =
1~. Therefore, what do you think is the output of ~rep(c(3,62,8,3))~[fn:4]?

As with ~seq~, you can include the result of ~rep~ in a vector of
the same data type (e.g. "numeric"):
#+begin_example
R> foo <- 4
R> c(3,8.3,rep(x=32,times=foo), seq(from=-2,to=1,length.out=foo+1))
[1]  3.0  8.3 32.0 32.0 32.0 32.0 32.0 -2.0 -1.5 -1.0 -0.5  0.0  0.5  1.0
#+end_example

~rep~ also works for characters and character vectors:
#+begin_example
R> rep("data science", times=2)
[1] "data science" "data science"

R> rep(c("data","science"), times=2)
[1] "data"    "science" "data"    "science"

R> rep(c("data","science"), times=2, each=2)
[1] "data"    "data"    "science" "science" "data"    "data"    "science"
[8] "science"
#+end_example

Did you hear the "matching data type" remark? Try to mix characters
and numbers in a vector and see what happens! (Tip: it's called
"[[https://www.oreilly.com/library/view/r-in-a/9781449358204/ch05s08.html][coercion]]").

If you want a vector of a specified type and length, you can use the
~vector~ function. Each of the values in the result is zero,
~FALSE~, or an empty string, or whatever the equivalent of "nothing"
is. You can check the ~class~ yourself:
#+begin_example
R> vector("numeric",5)
[1] 0 0 0 0 0
R> vector("logical",5)
[1] FALSE FALSE FALSE FALSE FALSE
R> vector("character",5)
[1] "" "" "" "" ""
#+end_example
So-called "wrapper" functions exist, which achieve the same thing
when creating vectors this way:
#+begin_example
R> numeric(5)
[1] 0 0 0 0 0
R> logical(5)
[1] FALSE FALSE FALSE FALSE FALSE
R> character(5)
[1] "" "" "" "" ""
#+end_example
* TODO Sorting and measuring lengths
[[https://youtu.be/KRghGmuS6Ck][[Watch the video (9:30)]​]]
-----
** SORT
Sorting and ordering and ranking vector elements comes up all the
time, because what we wish to know, or show, or display, is
irrelevant to the way the data are stored. We'll talk about ordering
and ranking later, when we have introduced sub-setting vectors.

R is simple, so of course the function we're looking for is called
~sort~. Sorting a numerical vector rearranges the elements according
to size. Let's look at a few examples
#+begin_example sort
R> sort(x = c(2.5, -1, -10, 3.44), decreasing = FALSE)
[1] -10.00  -1.00   2.50   3.44

R> sort(x = c(2.5, -1, -10, 3.44), decreasing = TRUE)
[1]   3.44   2.50  -1.00 -10.00
#+end_example
You supply a vector to the function as the argument ~x~, and a
second argument, ~decreasing~, to indicate the order you wish to
sort in: ~decreasing=FALSE~ is the default (i.e. increasing) -
sorting from smallest to largest, while ~decreasing=TRUE~ means
searching from largest to smallest.

Note: the argument value of ~decreasing~ is not ~numeric~, it is
~logical~.
** LENGTH
The ~length~ function (check the help!) gets or sets the length of
vectors[fn:5] - for vectors, ~length(x)~ determines, how many
entries the vector has:
#+begin_example
R> length(x=c(3,2,8,1))
[1] 4
R> length(x=5:13)
[1] 9
#+end_example

You can still include objects that need to be evaluated - arithmetic
computations, or sequences, or repetitions - but ~length~ will tell
you the number of entries after the inner functions have been executed.

#+begin_example
R> foo <- 4
R> bar <- c(3, 8.3, rep(x=32, times=foo), seq(from=-2, to=1, length.out=foo+1))
R> length(bar)
[1] 11
R> bar
[1]  3.00  8.30 32.00 32.00 32.00 32.00 -2.00 -1.25 -0.50  0.25  1.00
#+end_example

The help page ~?length~ contains a peculiar example: you can measure
the utility function ~options()~, it seems! (In fact, I didn't know
this!) Try it yourself: type ~length(options())~. Can you figure out
why the answer is ~68~?
* TODO Exercises and solutions
[[https://youtu.be/lKxNNR1l3u8][[Watch the solution video (10:27)]​]]
-----
# #+CAPTION: vectors in R - exercise (Source: [[davies][Davies, 2016]]).
# #+NAME: fig:vector_ex
# [[./img/vector_exercises_davies.png]]

*Problem:*
#+begin_quote
(a) Create and store a sequence of values from ~5~ to ~-11~ that
progresses in steps of ~0.3~.
#+end_quote

*Solution:*
#+begin_example
> foo <- seq(from=5, to=-11, by=-0.3)
> foo
[1]   5.0   4.7   4.4   4.1   3.8   3.5   3.2   2.9   2.6   2.3   2.0   1.7
[13]   1.4   1.1   0.8   0.5   0.2  -0.1  -0.4  -0.7  -1.0  -1.3  -1.6  -1.9
[25]  -2.2  -2.5  -2.8  -3.1  -3.4  -3.7  -4.0  -4.3  -4.6  -4.9  -5.2  -5.5
[37]  -5.8  -6.1  -6.4  -6.7  -7.0  -7.3  -7.6  -7.9  -8.2  -8.5  -8.8  -9.1
[49]  -9.4  -9.7 -10.0 -10.3 -10.6 -10.9
#+end_example

*Problem:*
#+begin_quote
(b) Overwrite the object from (a) using the same sequence with the order
reversed.
#+end_quote

*Solution:*
#+begin_example
> foo <- sort(x=foo, decreasing=FALSE)
> foo
[1] -10.9 -10.6 -10.3 -10.0  -9.7  -9.4  -9.1  -8.8  -8.5  -8.2  -7.9  -7.6
[13]  -7.3  -7.0  -6.7  -6.4  -6.1  -5.8  -5.5  -5.2  -4.9  -4.6  -4.3  -4.0
[25]  -3.7  -3.4  -3.1  -2.8  -2.5  -2.2  -1.9  -1.6  -1.3  -1.0  -0.7  -0.4
[37]  -0.1   0.2   0.5   0.8   1.1   1.4   1.7   2.0   2.3   2.6   2.9   3.2
[49]   3.5   3.8   4.1   4.4   4.7   5.0
#+end_example

*Problem:*
#+begin_quote
(c) Repeat the vector ~c(-1,3,-5,7,-9)~ twice, with each element
repeated ~10~ times, and store the result. Display the result sorted
from largest to smallest.
#+end_quote

*Solution:*
#+begin_example
> foo <- rep(x=c(-1,3,-5,7,-9), times=2,each=10)
> foo
[1] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  3  3  3  3  3  3  3  3  3  3 -5 -5 -5 -5 -5
[26] -5 -5 -5 -5 -5  7  7  7  7  7  7  7  7  7  7 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9
[51] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1  3  3  3  3  3  3  3  3  3  3 -5 -5 -5 -5 -5
[76] -5 -5 -5 -5 -5  7  7  7  7  7  7  7  7  7  7 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9

> sort(x=foo, decreasing=TRUE)
[1]  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  7  3  3  3  3  3
[26]  3  3  3  3  3  3  3  3  3  3  3  3  3  3  3 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
[51] -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5
[76] -5 -5 -5 -5 -5 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9
#+end_example

*Problem:*
#+begin_quote
(d) Create and store a vector that contains, in any configuration,
the following:
- A sequence of integers from ~6~ to ~12~ (inclusive)
- A threefold repetition of the value ~5.3~
- The number ~-3~
- A sequence of nine values starting at ~102~ and ending at the
  number that is the total length of the vector created in problem
  (c).
- Confirm that the length of the vector created is ~20~
#+end_quote

*Solution:*
#+begin_example
> bar <- c(6:12,rep(5.3,times=3),-3,seq(from=102,to=length(foo),length.out=9))
> bar
[1]   6.00   7.00   8.00   9.00  10.00  11.00  12.00   5.30   5.30   5.30
[11]  -3.00 102.00 101.75 101.50 101.25 101.00 100.75 100.50 100.25 100.00
> length(bar)
[1] 20
#+end_example

(Source: [[davies][Davies, 2016]])
* TODO Naming
# Cp. Cotton, p. 42
Each vector element can be given a name. This can make code much
more readable. Elements can be named inside the vector definition:
#+begin_src R :session
  c(apple = 1, banana = 2, "kiwi fruit" = 3, 4)
#+end_src

Or they can be named explicitly using the function ~names~[fn:6]
#+begin_src R :session
  x <- 1:4
  names(x) <- c("apple", "bananas", "kiwi fruit", "")
  x
#+end_src

~names(x)~ returns the names of a vector, and you can remove the
names by overwriting ~names(x)~ with ~NULL~, an object whose value
is undefined (not to be mixed up with ~NA~ and ~NaN~):

#+begin_src R :session
  names(1:4)  # unnamed sequence vector has the value NULL
  names(c(apple=1,banana=2,3))  # last element's name is empty ""
  class(names)
#+end_src

And here are some data type checks involving names:
#+begin_src R :session
  class(names)             # "function"
  class(names(1:4))        # "NULL"
  class(c(apple=1))        # "numeric"
  class(names(c(apple=1))) # "character"
#+end_src

What if your names are too short (or too long) for your vector?
Watch this:
#+begin_src R :session
  week <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
  week    # "Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun"
  vec <- rep(x=c(1,2,3,4,5,6,7),times=2)
  vec   #  1 2 3 4 5 6 7 1 2 3 4 5 6 7
  names(vec) <- week
  vec   # this one shows seven NA names
  vec[8:14]                 # subvector with the NA names only
  names(vec)[8:14] <- week  # name the subvector (remove NA)
  names(vec)[-(8:14)]       # deleting names subvector
  names(vec) <- NULL        # remove names
#+end_src
* TODO Example dataset ~islands~
This is the example used in ~help(names)~.
#+begin_example
> str(islands)
 Named num [1:48] 11506 5500 16988 2968 16 ...
 - attr(*, "names")= chr [1:48] "Africa" "Antarctica" "Asia" "Australia" ...
> head(islands)
      Africa   Antarctica         Asia    Australia Axel Heiberg       Baffin
       11506         5500        16988         2968           16          184
#+end_example
(Yes, "Axel Heiberg Island" exists: [[https://en.wikipedia.org/wiki/Axel_Heiberg_Island][$16,671$ square miles according to Wikipedia]].)
* TODO Indexing vectors (again)
[Watch video]

# cp. Cotton, Learning R
- Passing a vector of positive numbers returns the slice of the
  vector containing the elements at those locations.
#+begin_example
> x <- (1:5)^2   # example vector
> x
[1]  1  4  9 16 25
 > x[c(1,3,5)]
[1]  1  9 25
#+end_example
- Passing a vector of negative numbers returns the slice of the
vector containing the elements everywhere except at those
locations.
#+begin_example
> x[c(-2,-4)]
[1]  1  9 25
#+end_example
- Passing a logical vector returns the slice of the vector
containing the elements where the index is TRUE.
#+begin_example
> x[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
[1]  1  9 25
#+end_example
- For named vectors, passing a character vector of names returns the
slice of the vector containing the elements with those names.
#+begin_example
> names(x) <- c("one", "four", "nine", "sixteen", "twenty five")
> x[c("one", "nine", "twenty five")]
   one        nine twenty five
     1           9          25
#+end_example
* TODO Coercion
# (Irizarry p. 32)
All vector elements have to be of the same ~class~ or type:
~logical~, ~numeric~, or ~character~. What happens when you mix
these? R will make it happen at the price of "coercion". Let's look
at a few examples:

In the first example, ~foo~ contains a missing value, a number and a
character, but the vector is still classified as a ~character~
vector, and the number is converted to a character, because R knows
how to turn ~3~ into ~"3"~, but does not know what number to assign
to a character:
#+begin_src R :session :results output
  (foo <- c("a",NA,1))
  class(foo)
#+end_src
Output:
#+begin_example
: [1] "a" NA  "1"
: [1] "character"
#+end_example

With the ~is.na~ function, we can test for ~NA~ values, and with
~as.character~ and ~is.numeric~ for ~character~ and ~numeric~
values, respectively:
#+begin_src R :session :results output
  is.na(foo)         # check for missing values
  is.character(foo)  # check for character vector
  is.numeric(foo)    # check for numeric vector
#+end_src
Output:
#+begin_example
: [1] FALSE  TRUE FALSE
: [1] TRUE
: [1] FALSE
#+end_example

You can also (try to) explicitly convert the elements using
~as.[class]~: Let's do this one by one to relish the results:
#+begin_src R :session :results output
  as.character(foo) # convert vector to character values
#+end_src
#+begin_example
: [1] "a" NA  "1"
#+end_example
No surprises here. This is the default

Now, force vector to numeric values:
#+begin_src R :session :results output
  as.numeric(foo)  # convert vector to numeric values
#+end_src
#+begin_example
: [1] NA NA  1
: Warning message:
: NAs introduced by coercion
#+end_example
The output contains some surprises! The first element of the
~"character"~ vector is ~"a"~ and cannot be turned into a number,
hence it becomes MIA, and R confesses to "coercion".

And lastly, not to forget logical values:
#+begin_src R :session :results output
  as.logical(foo)   # convert vector to logical values
#+end_src
#+begin_example
: [1] NA NA NA
#+end_example
This may come as a surprise, since we learnt that ~TRUE~ is stored
as ~1~ and ~FALSE~ as ~0~ (remember summing with ~sum~ over a
logical vector?). But the presence of ~NA~ and character ~"a"~
spoils it. The conversion of a vector consisting only of numbers
does however work - sort of. In fact, any non-zero number is
converted into ~TRUE~:
#+begin_src R :session :results output
  as.logical(c(1,0,-1, 0.333, -Inf,NaN ))
#+end_src

#+begin_example
: [1]  TRUE FALSE  TRUE  TRUE  TRUE    NA
...except ~NaN~, but that's not a number, by definition):
#+end_example
I think that's enough evidence for you to stay away from mixing data
types in vectors - though the conversion functions will come in very
handy!
* TODO Summary
- R is a functional language in which everything's an object.
- R functions differ in: performance (speed), ease-of-use and
  clarity.
- To assign values to objects, use the ~<-~ operator.
- To assign values to arguments in functions, use the ~=~ operator.
- The elements of a numeric, character or logical vector are
  numbers, letters or truth values.
- A vector can have arithmetic calculations or vectors as elements.
- A histogram distributes data by frequency across evenly spaced
  bins.
- Sequences of numbers can be created using the colon operator, or
  the functions ~seq~ or ~rep~.
- Vectors can be sorted with ~sort~ in either direction.
- Vector length can be measured as the number of vector elements with ~length~.
- Index vectors can be used to select sub-vectors.
- Negative index values delete the corresponding vector elements
  -----
  *R CODE EXAMPLES:*
  | ~x <- 5~                                   | assign ~5~ to object ~x~                      |
  | ~x <- x+1~                                 | overwrite ~x~ (new value)                     |
  | ~c(1,2,3,4)~                               | define (numerical) vector                     |
  | ~class(bar)~                               | check type of object ~bar~                    |
  | ~hist(x,breaks=foo)~                       | histogram of dataset ~x~ with ~foo~ bins      |
  | ~m:n~                                      | sequence ~m~ to ~n~ at intervals ~= 1~        |
  | ~seq(from=foo,to=bar,by=baz)~              | sequence from ~foo~ to ~bar~ intervals ~=baz~ |
  | ~seq(from=foo,to=bar,length.out=fuz)~      | seq. ~foo~ to ~bar~, ~fuz~ equal intervals    |
  | ~rep(x=foo,times=bar,each=baz)~            | repeat ~foo~ times ~bar~, and                 |
  |                                            | repeat each element of ~foo~ times ~baz~      |
  | ~vector("numeric",foo), numeric(foo)~      | empty numeric vector of length ~foo~          |
  | ~vector("character",foo), character(foo)~  | empty numeric vector of length ~foo~          |
  | ~vector("logical",foo), logical(foo)~      | empty numeric vector of length ~foo~          |
  | ~sort(x=foo, decreasing=FALSE)~            | sort vector ~foo~ from smallest to largest    |
  | ~sort(x=foo, decreasing=TRUE)~             | sort vector ~foo~ from largest to smallest    |
  | ~length(x=foo)~                            | print length of vector ~foo~                  |
  | ~[n]~, ~[n:m]~, ~[-n]~                     | indices ~n~, ~n~ to ~m~, deleting element ~n~ |
  | ~prod(foo)~, ~sum(foo)~                    | multiply / sum up all elements of vector foo  |
  | ~names(x)~                                 | return names of vector ~x~ (or ~NULL~)        |
  | ~as.character~, ~as.numeric~, ~as.logical~ | coerce arguments to the resp. class           |

* TODO Concept summary
#+attr_html: :width 400px
[[../img/4_summary.jpg]]

- In R mathematical expressions are evaluated according to the
  /PEMDAS/ rule.

- The natural logarithm $ln(x)$ is the inverse of the exponential
  function e^x.

- In the scientific or e-notation, numbers are expressed as positive
  or negative multiples of 10.

- Each positive or negative multiple shifts the digital point to the
  right or left, respectively.

- Infinity ~Inf~, not-a-number ~NaN~, and not available numbers ~NA~
  are /special values/ in R.

* TODO Code summary

| CODE           | DESCRIPTION                           |
|----------------+---------------------------------------|
| ~log(x=,b=)~     | logarithm of ~x~, base ~b~                |
| ~exp(x)~         | $e^x$, exp[onential] of $x$           |
| ~is.finite(x)~   | tests for finiteness of ~x~             |
| ~is.infinite(x)~ | tests for infiniteness of ~x~           |
| ~is.nan(x)~      | checks if ~x~ is not-a-number           |
| ~is.na(x)~       | checks if ~x~ is not available          |
| ~all.equal(x,y)~ | tests near equality                   |
| ~identical(x,y)~ | tests exact equality                  |
| ~1e2~, ~1e-2~      | $10^{2}=100$, $10^{-2}=\frac{1}{100}$ |

* References

- <<cotton>> Richard Cotton (2013). [[http://duhi23.github.io/Analisis-de-datos/Cotton.pdf][Learning R.]] O'Reilly Media.

- <<davies>> Tilman M. Davies (2016). [[https://nostarch.com/bookofr][The Book of R. (No Starch
  Press).]]

- <<irizarry>> Rafael A. Irizarry (2020). [[https://rafalab.github.io/dsbook/][Introduction to Data Science]]
  (also: CRC Press, 2019).

- <<matloff>> Norman Matloff (2020). [[https://github.com/matloff/fasteR][fasteR: Fast Lane to Learning R!]].
  <<pemdas>>

* Footnotes

[fn:1]Note: If this is not the case, R coerces the vector elements to
conform to one type, as we will see later. A data type that can hold
any type of value is called a list.

[fn:2]The [[https://en.wikipedia.org/wiki/Histogram][Wikipedia entry for "histogram"]] is not bad as a start, lots
of examples and you'll soon find out how to make these yourself! The
origin of the name "histogram" is not clear - it was probably invented
by Pearson, who introduced this type of graph, and is short for
"HISTorical diaGRAM".

[fn:3]I am borrowing heavily everywhere in this script from several
[[sources][sources]]: the books that I've read on R, by Cotton (2013), Davies
(2016), Irizarry (2019), and the tutorial by Matloff (2020). You
should check them out. If you want to get one, get the book by Davies
in print. The others are free online.

[fn:4]The answer is ~[1] 3 62 8 3~. ~times=each=1~ means that the
vector and each of its elements is repeated once, i.e. identical to
the input vector.

[fn:5] Both ~length~ and ~sort~, as you can read in the respective
help pages, work both for vectors and for "factors". These are
necessary whenever we deal with qualities (like "male" or "female")
rather than quantities. You'll learn about them soon!

[fn:6] You should look up the examples in ~help(names)~: the data set
~islands~ is a named vector suited to play around with vector naming.

[fn:7] "Arithmetic (from the Greek ἀριθμός arithmos, 'number' and τική
[τέχνη], tiké [téchne], 'art') is a branch of mathematics that
consists of the study of numbers, especially the properties of the
traditional operations on them—addition, subtraction, multiplication,
division, exponentiation and extraction of roots." ([[https://en.wikipedia.org/wiki/Arithmetic][Wikipedia]])

[fn:8] Not just one MOOC, in fact, but a series of nine courses
altogether, with which you can get a professional certificate. These
MOOCs are hosted by [[https://www.edx.org/professional-certificate/harvardx-data-science][edX.org]].

[fn:9] For a while, I had also envisioned that I might use a
block-based, visual programming language like MIT's [[https://scratch.mit.edu/][Scratch]] or its
able cousin from Berkeley U., [[https://snap.berkeley.edu/][Snap!]] OpenSAP offers great [[https://open.sap.com/courses/snap2][(free)
courses]] on Snap! and you can learn all about Scratch online, too.

[fn:10] Fun fact: 'FORTRAN' stands for 'FORmula TRANslator'. A large
part of R's code base is written in FORTRAN, which is the oldest
programming language specifically used for scientific computations
(e.g. it was the first language I learnt at university).

[fn:11] This was mentioned in the "Getting started with R" lesson. To
list all built-in datasets in base-R, enter simply ~data()~. This is
the same function that you use to load a dataset after loading the
respective library (which contains more than one dataset).

[fn:12] Enter ~help(Nile)~, or ~?Nile~. This is one of the more useful
commands. Will only work if the corresponding dataset has been
loaded - for ~Nile~, this is the case.

[fn:13] This page-wise presentation mode with previous|next|up|down
navigation is actually the page-wise [[https://www.emacswiki.org/emacs/InfoMode][(Emacs) ~Info~]] style
presentation.

[fn:14]You know this, too: ~str(Nile)~ for the structure, or
~head(Nile)~ to see the first few (6) elements.
