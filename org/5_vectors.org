#+TITLE: VECTORS in R
#+AUTHOR: Introduction to data science (DSC 105) Fall 2022
#+startup: hideblocks indent overview inlineimages entitiespretty
#+PROPERTY: header-args:R :results output :session *R*
#+attr_html: :width 700px
[[../img/5_workhorse.png]]
* DONE Preparations to code along
#+attr_html: :width 400px
[[../img/emacsprep.png]]

- Open a new Org-mode file ~vectors.org~ in Emacs

- Put this line at the top of the file ~vectors.org~:

  ~#+PROPERTY: header-args:R :results output :session *R*~

- Activate the code by putting your cursor on the line and entering
  ~C-c C-c~. You should see the message ~Local setup has been refreshed~
  in the minibuffer at the bottom of the editor.

- When you execute your first R code block, you'll be asked where you
  want the session named ~*R*~ to run: enter the path to ~vectors.org~

- For plots, use the header ~:results graphics file :file vectors.png~
  (this will overwrite the PNG file every time you create a new plot)

- When you leave Emacs, you'll be warned that the session ~*R*~ is
  active: you can ignore this warning

* What will you learn?
#+attr_html: :width 500px
[[../img/5_workhorse.jpg]]

After this lesson, you should be able to:

- Understand assignment in R
- Creating vectors, sequences and repetitions
- Sorting and measuring vector length
- Subsetting and extracting vector elements
- Vectorizing (rescaling)
- Classes and logical vectors

/Most sections are accompanied by YouTube videos./

* Everything is an object [[https://youtu.be/7Ab2RQs7Lj8][video​]]
#+attr_html: :width 500px
[[../img/5_berlin.png]]

- R is a functional, object-oriented language

- There are usually many different ways to achive the same result

- Different solutions differ in: performance, clarity, ease of use

- PERFORMANCE: important for large data sets only

- CLARITY: essential when communicating methods, code, results

- EASE OF USE: determines the fun you have when programming

[[https://www.youtube.com/playlist?list=PL6SfZh1-kWXl3_YDc-8SS5EuG4h1aILHz][[Watch YouTube Playlist Vectors Part I​]​]]

#+begin_notes
R is a functional, object-oriented language: everything's an object,
and functions rule, as you already know. Because functions rule,
there are usually many different ways to achieve the same
result. They often differ in terms of performance, ease of use, and
clarity. Performance becomes important when you work with truly
large data sets, otherwise not so much. Ease of use to some extent
determines the fun you do or don't have when using the
language. Clarity is essential when communicating your methods
(including your code) and your results to others. This is not a nice
to have. Views of different packages (like the Tidyverse) differ
massively regarding all of these.
#+end_notes

* Assigning objects [[https://youtu.be/WZqJ_AyoOEU][(video)​]]

- You can use ~<-~ or ~=~ for assignment of values to variables
- Use ~<-~ for objects, and ~=~ to assign function parameters
- Object names must start with a letter and avoid reserved words

- Challenge:

  1) Create an object ~a~ that stores the value 3^2 \times 4^{1/8} and
     display it.

  2) Overwrite ~a~ with itself divided by 2.33. Print the result to the
     console.

  3) Create a new object ~b~ with the value -8.2 \times 10^{-13} using
     scientific (e-) notation and print it to the console *without*
     scientific notation using the ~format~ function.

  4) Print the result of multiplying ~a~ and ~b~ to the console.

  5) Check all variables in the current session with ~ls~.

* Why we need vectors [[https://youtu.be/iFsB_34mnR0][(video)]]

- We need vectors to handle multiple items in R
- Vectors contain observations or measurements of a single variable
- Each vector can have only one data type - e.g. ~numeric~ [fn:1]

1) Give three examples of such collections for vectors:
   - numbers, e.g. the heights of students in this class
   - text, e.g. the names of students of this class
   - logical values, e.g. sex of students of this class

2) Define sample vectors ~s_heights~, ~s_names~ and ~s_male~.

3) Print the vectors.

#+begin_notes
*Solution:*
1) the heights of every student of this class, in cm.
2) the first names of every student of this class (strings).
3) observations, if a student is male or not male (male means ~TRUE~).

Let's put some wood behind the arrow and define sample vectors for these:

#+begin_src R :session :results silent
  s_heights <- c(180, 181, 158, 175, 179, 168)
  s_names <- c("Vincent", "Natalija", "Adrian", "Andres", "Helena")
  s_male <- c(TRUE, FALSE, TRUE, TRUE, FALSE)
#+end_src
#+end_notes

* R object ~class~
#+attr_html: :width 600px
[[../img/5_class.jpg]]

- The function ~class~ (check the help) returns the R object type

- Object type is not the same as data type or storage type

- Besides types there are also data structures (like ~vector~)

- Let's check the class for our three vectors with student data

#+begin_notes
In order to check what R thinks about your observation or data type,
you can use the function ~class~. Look at the help page for details
and enter the examples at the bottom of the help page.

Let's call ~class~ for our three sample vectors:
#+begin_src R :session :results output
  class(s_heights) # what type vector is this?
  class(s_names)   # what type vector is this?
  class(s_male)    # what type vector is this?
#+end_src

#+RESULTS:
: [1] "numeric"
: [1] "character"
: [1] "logical"


The resulting session output:
#+begin_example
> class(s_heights)
[1] "numeric"
> class(s_names)
[1] "character"
> class(s_male)
[1] "logical"
#+end_example
#+end_notes

* Creating vectors [[https://youtu.be/Ov6SIrpY_io][(video)]]

- The function to create a vector, or "combine values", is ~c()~:
  #+begin_src R :session
    myvec <- c(1,3,1,42) # combine integers as vector
    myvec                # prints 1 3 1 42
    class(myvec)         # determine the data type - "numeric"
  #+end_src

- Vector elements can be calculations or previously stored items:
  #+begin_src R :session :results output
    foo <- 32.1
    myvec2 <- c(3, -3, 3.45, 1e+03, 64^0.5, 2+(3-1.1)/9.44, foo)
    myvec2
  #+end_src

- Vector elements can even be vectors themselves:
  #+begin_src R :session :results output
    myvec3 <- c(myvec, myvec2)
    myvec3
    class(myvec3)
  #+end_src

- In the resulting output, the two vectors were put side by side. The
  new vector now has 11 = 4 + 7 elements.

- [ ] What about missing values, ~NA~, and non-numbers, ~NaN~, and what
  about the special values ~Inf~ and ~-Inf~ - can you have these in
  vectors, too? Can you think about a way to test this?

  #+begin_src R
    specvec <- c(NA, NaN) # a vector with a NA and a NaN
    class(specvec)
    is.nan(specvec)  # testing for NaN values
    is.na(specvec)   # testing for NA values
    specvec1 <- c(specvec, Inf, -Inf) # a new vector with Inf, Inf
    is.finite(specvec1)  # testing for finiteness
    is.infinite(specvec1)  # testing for infiniteness
    class(specvec1)
    #+end_src
* Example: down the Nile [[https://youtu.be/wwsD2KuoKt8][(video)]]
#+attr_html: :width 600px
[[../img/nile.png]]

- Open your Emacs Org-mode practice file ~vectors.org~

- At the top, below the ~#+PROPERTY:~ line, add a headline like this:
  #+begin_example org
    * Vectors in R
  #+end_example
- Go to the bottom of your file with ~M->~

- Add another headline
  #+begin_example org
    * Plotting the ~Nile~
  #+end_example
- Additional code blocks should go below this headline

* Base R - what's that again?

- Let's not forget that there are real data out there!

- R (i.e. "[[https://iqss.github.io/dss-workshops/R/Rintro/base-r-cheat-sheet.pdf][Base R]]") includes a number of built-in datasets
  #+attr_html: :width 300px
  [[../img/baseR.png]]

- Do you remember how to find these pre-loaded datasets? One of these
  is ~Nile~. Do you remember how to get information on such a dataset
  (or on any R object)?

* What data structure is ~Nile~?

- ~Nile~ contains a so-called "time series", a sequence of numbers that
  correspond to measurements of the annual flow (in billion - 10⁸ -
  cubic meters) of the river Nile at [[https://en.wikipedia.org/wiki/Aswan][Aswan]], measured between
  1871-1970. You can use ~class~ to confirm it:

  #+begin_src R :session
    class(Nile)  # what type of dataset is this?
  #+end_src

  #+begin_notes time series
  The output is ~"ts"~ or time series. You may remember that we
  previously looked at large datasets. ~mtcars~ for example was a
  "data frame" (we'll learn more about them later).
  #+end_notes

- How can we print this dataset, or parts of it, on the screen?

  #+begin_notes solution

  *Solution:* there are different ways to look inside ~Nile~:
  #+begin_src R :session
    str(Nile)   # show dataset structure
    head(Nile)  # show first few elements
    Nile        # this prints the whole dataset
  #+end_src

  Results from the session:
  #+begin_example
  > str(Nile)
  Time-Series [1:100] from 1871 to 1970: 1120 1160 963 1210 1160 1160 813 1230 1370 1140 ...
  > head(Nile)
  [1] 1120 1160  963 1210 1160 1160
  > Nile
  Time Series:
  Start = 1871
  End = 1970
  Frequency = 1
  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020
  [16]  960 1180  799  958 1140 1100 1210 1150 1250 1260 1220 1030 1100  774  840
  [31]  874  694  940  833  701  916  692 1020 1050  969  831  726  456  824  702
  [46] 1120 1100  832  764  821  768  845  864  862  698  845  744  796 1040  759
  [61]  781  865  845  944  984  897  822 1010  771  676  649  846  812  742  801
  [76] 1040  860  874  848  890  744  749  838 1050  918  986  797  923  975  815
  [91] 1020  906  901 1170  912  746  919  718  714  740
  #+end_example

  Because we don't know yet how to look at sub-vectors or individual
  vector elements, we cannot directly check what type the elements of
  ~Nile~ have, but the output seems to suggest that the Nile flow is
  measured in integer numbers.

  You can also see from the print output of ~Nile~ how row labels
  work: there are 15 numbers per row, and the second row starts with
  the 16th number, indicated by ~[16]~.
  #+end_notes

* Plotting the nile [[https://youtu.be/c_BvsnKU7T4][(video)]]

- Plotting is often a good entry into exploring data

- ~Nile~ is a numeric vector of a single, continuous variable over time

- To visualize such data, /histograms/ or /line plots/ are useful

- What you're really after is a picture of a value /distribution/

- Why are /histograms/ called "histograms"?

- How can you find out more about plotting a histogram in R?

  #+begin_notes help(hist)
  *HELP:* You know of course what to do at this point: call for help
  using ~?hist~. Skip to the ~Examples~ section at the end, where you find
  the command ~hist(islands)~. This creates a histogram of another
  dataset, ~islands~. With the help of ~?islands~, you find out quickly
  that this is a "named vector of 48 elements". Never mind what this
  means, but you can enter the command, which will generate a
  plot. This is a histogram: it plots frequency of the data and
  distributes them into bins[fn:2]. Let's get back to the river Nile.

  Like most R functions, ~hist~ has many options. If you execute
  ~hist(Nile)~, you get the same type of graph as in the example except
  that we know what the data are (annual Nile flow measurements in ~10⁸
  m³~, or 100,000,000 (100 million) of cubic metres.
  #+end_notes

* Plotting the histogram

- Let's plot the histogram of ~Nile~

- If you're coding along, note that you need to add this to your code
  block header: ~:results graphics file :file hist.png~

  #+begin_src R :exports both :session :results output graphics file :file ../img/histNile.png
    hist(Nile)
  #+end_src

- [X] *Can you interpret the plot given what you know about the data?*

- [ ] Add the argument ~breaks=20~ to the ~hist~ function call. Change the
  file name in the code block header if you want to create a new PNG file

  #+begin_src R :exports both :session :results output graphics file :file ../img/histNile20.png
    hist(Nile, breaks=20)
  #+end_src

#+begin_notes hist function
The ~hist~ function creates 10 bins by default and distributes the data
accordingly. You can alter this number of bins by changing the
argument ~breaks~, e.g. ~hist(Nile, breaks=20)~ (try it!).

We'll get back to the ~Nile~ once we know more about vectors! In the
next four sections, we're going to look at useful functions.
#+end_notes

* Plotting the line plot

- Since ~Nile~ is a time series, every data point has a time label

- You can easily plot the evolution of the date over time with ~plot~

- A line plot is useful to visualize two continuous numeric variables

- This leads to a so-called /line plot/
  #+begin_src R :exports both :session :results output graphics file :file ../img/lineNile.png
    plot(Nile)
  #+end_src

- [ ] *Can you interpret the plot given what you know about the data?*

* Asking for help

[[../img/5_help.jpg]]

- When you see a new function or dataset, look it up

- Use fuzzy help search (~??~) or regular help (~?~, ~help~)

- Scroll down to check out (and run) the ~examples~

- Get an overview of the available options

#+begin_notes
In the following, I won't waste more space with the obvious: whenever
I mention a new function or dataset, or keyword, look the
corresponding help up immediately. More often than not, you will take
something away from it - at the very minimum an example. Over time,
you'll understand things even though you don't know how you possibly
could: this is because you've begun to develop a habit by using a
system of learning - looking up the help content - and the more you
look at help pages, the more you recognize known concepts.
#+end_notes

* NEXT Creating sequences and repetitions [[https://youtu.be/G2P_MVq3eyM][(video)]]
#+attr_html: :width 600px
[[../img/5_sequence.jpg]]
* The colon ~:~ operator

- ~1:n~ creates a sequence of numbers separated by intervals of 1
  #+begin_src R
    3:21
  #+end_src

- Check what type of R object ~3:21~ is by applying the functions:
  - ~class~ (R object class),
  - ~mode~ (R object storage mode)
  - ~is.vector~ (R vector check)
  #+begin_src R
    class(3:27)
    mode(3:27)
    is.vector(3:27)
  #+end_src

- Sequences created this way can also be stored.
  #+begin_src R
    foo <- 5.3
    bar <- foo:10
    bar
  #+end_src

- What happens if the first argument of ~:~ is smaller than the second?
  #+begin_src R
    x <- 10:foo
    x
  #+end_src

- You can perform computations to specify the range.
  #+begin_src R
    baz <- foo:(-47+1.5)
    baz
  #+end_src

  #+begin_notes details
  Try to understand what happened here by checking the numbers: the
  first value of the sequence is ~foo = 5.3~. The last value is a
  negative value, ~-47+1.5 = -45.5~. In order to generate the
  sequence, R counts down in steps of ~1~ from the first to the last
  value. It stops at ~-44.7~, because the next value, ~-45.7~ would be
  outside of the interval $[5.3,-45.5])$.
  #+end_notes

* Sequences
- The function ~seq~ allows modifying the step-width with ~by~:
  #+begin_src R
    seq(from = 3, to = 27, by = 3)
  #+end_src
- ~seq~ always starts at ~from~ but not always end on ~to~:
  #+begin_src R
    seq(from=1, to=10, by=2) # range even, stepsize even
    seq(from=1, to=11, by=2) # range odd, stepsize even
  #+end_src
- To end exactly on the last value, use ~length.out~:
  #+begin_src R
    seq(from=1, to=10, length.out=10) # either by or length.out
    seq(from = 3, to = 27, length.out = 40)
  #+end_src
- [ ] What is the step-width in the last case? Compute it and use it
  to create a sequence of 40 numbers from 3 to 27 exactly, with ~seq~.
  #+begin_notes solution
  #+begin_src R
    s <- seq(from = 3, to = 27, length.out = 40)
    s[2]-s[1] # step-width
    seq(from = 3, to = 27, by = s[2]-s[1])
  #+end_src
  #+end_notes
- ~length.out~ can only be positive (there is no 'negative length').

- [ ] Create a decreasing sequence of length 5 from 5 to -5. Use
  ~length.out~ first, then use ~by~ to achieve the same result.
  #+begin_notes solution
  #+begin_src R
    myseq <- seq(from=5, to=-5, length.out=5)
    myseq
    myseq1 <- seq(from=5, to=-5, by = -2.5)
    myseq1
  #+end_src
  #+end_notes
* Repetition
- Use ~rep~ to repeat a value, e.g. the number 1, four times:
  #+begin_src R
    rep( x = 1, times = 4)
  #+end_src
- You can repeat any R object, e.g. the vector ~c(3, 62, 8, 3)~, or the
  scalar ~foo~, or an arbitrary arithmetic expression:
  #+begin_src R
    rep(x=c(3,62,8,3),times=3)
    rep(x=foo, times=2)
    rep(x=2*2, times=(foo*2)) # times must be a positive integer
  #+end_src
- The ~each~ argument of ~rep(x)~ says how many times each element of ~x~ is
  repeated:
  #+begin_src R :session :results output
    rep(x=c(3,62), times=3)  # repeat vector three times
    rep(x=c(3,62), each=2)   # repeat each vector element twice
    rep(x=c(3,62), times=3, each=2) # repeat each vector element twice,
                                            # and repeat the result three times
  #+end_src
- [ ] The default of ~times~ and ~each~ is ~1~. What is ~rep(c(3,62))~ ?
- As with ~seq~, you can include the result of ~rep~ in a vector of the
  same data type (e.g. ~numeric~):
  #+begin_src R
    foo <- 4 # store 4 in foo

    ## create vector with rep and seq
    c(3, 8.3, rep(x=32,times=foo), seq(from=-2,to=1,length.out=foo+1))
  #+end_src
* Repetition with characters

- ~rep~ also works for characters and character vectors:
  #+begin_src R
    rep(x="data science", times=2)
    rep(x=c("data","science"), times=2)
    rep(x=c("data","science"), times=2, each=2)
  #+end_src
- [ ] What happens if you try to mix characters, numbers, Booleans?
  Repeat an expression that has all three data types in it.
  #+begin_src R
    rep(x=c("data", 1, TRUE), times=2)
  #+end_src

  #+begin_notes coercion
  When you call a function with an argument of the wrong
  type, or, as in the case of ~c~, you try to create a vector of
  different data types, R responds with "[[https://www.oreilly.com/library/view/r-in-a/9781449358204/ch05s08.html][coercion]]" to make it happen.
  #+end_notes
* Sorting and measuring lengths [[https://youtu.be/KRghGmuS6Ck][(video)]]
#+attr_html: :width 500px
[[../img/5_sorting.jpg]]
* Sorting vector elements

- /Sorting/ is important because we don't care about memory locations

- ~sort(x)~ arranges the elements of x according to size

- The default order is ascending, or ~decreasing = FALSE~
  #+begin_src R
    sort(x = c(2.5, -1, -10, 3.44))  # sort ascending
    sort(x = c(2.5, -1, -10, 3.44), decreasing = FALSE) # sort ascending
    sort(x = c(2.5, -1, -10, 3.44), decreasing = TRUE)  # sort descending
  #+end_src

- Special values are removed, put last or first with ~na.last~. This
  works for all special values - ~NA~, ~NaN~ and ~Inf~.
  #+begin_src R
    sort(x = c(2.5, -1, -10, 3.44,NA), na.last=TRUE)  # put NA last
    sort(x = c(2.5, -1, -10, 3.44,NaN), na.last=TRUE) # put NaN last
    sort(x = c(2.5, -1, -10, 3.44,Inf), na.last=TRUE) # put Inf last
    sort(x = c(2.5, -1, -10, 3.44,NA), na.last=FALSE) # put NA first
    sort(x = c(2.5, -1, -10, 3.44,NA), na.last=NA)    # remove NA
  #+end_src

- [ ] Remember that ~NA~ is a ~logical~ object. How can you check that?
  #+begin_src R
    class(NA)
  #+end_src
* Length of vectors

- The ~length~ function gets or sets the length of vectors[fn:3]:
  #+begin_src R
    length(x = c(3,2,8,1,10))  # vector of 5 elements
    length(x = 5:13)           # vector of 9 elements
    length(x = c(3,2,2^3,5*3)) # vector of 4 elements
    length(1000)               # scalar/vector of 1 element
  #+end_src

- If you have functions inside the object definition, ~length~ gives you
  the number of entries /after/ the inner functions have been executed:
  #+begin_src R
    foo <- 4
    bar <- c(3,8.3,rep(x=32,times=foo),seq(from=-2,to=1,length.out=foo+1))
    bar
    length(bar)
  #+end_src

- [ ] R's display options are stored in ~options()~, which is a
  ~list~. Lists have a length like options. How many options does
  ~options()~ have?
  #+begin_src R
    class(options())   # class of options()
    length(options())  # length of options() : number of options
    class(options)     # class of options as a function
    class(options()$digits) # class of one options() element
    length(options()$digits) # length of one options() element
  #+end_src

* TODO Practice: creating vectors
#+attr_html: :width 400px
[[../img/5_gnome.jpg]]

- Practice what you've learnt independently by solving problems
- Save the ~raw~  practice file from GitHub as an Org-mode file
- Complete the file in Emacs by using R code blocks
- Submit the result on Canvas no later than Monday September 26 8 am
  (to give me an opportunity to check and grade your results)

* Naming

- Naming vector elements makes code more readable.
  #+begin_src R :session
    c(apple = 1, banana = 2, "kiwi fruit" = 3, 4)
  #+end_src
- Or you can name elements explicitly using the function ~names~[fn:4]
  #+begin_src R :session
    x <- 1:4
    names(x) <- c("apple", "bananas", "kiwi fruit", "")
    x
    names(x)
  #+end_src
- Looking under the hood of ~names~:
  #+begin_src R :session
    foo <- 1:4  # vector 1,2,3,4
    names(foo)  # vector is not named (NULL)
    names(foo) <- letters[1:4]  # assign letter names
    names(foo)
    foo  # default display includes names
    str(foo)  # structures reveals names as attributes
    attributes(foo) # attributes is a list of 1 element, $names
    str(attributes(foo))
  #+end_src
* Length of ~names~ vs. vector

- What if your names are too short (or too long) for your vector?

- Define a vector ~week~ whose elements are the names of weekdays
  #+begin_src R
    week <- c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
    week
  #+end_src

- Define a vector ~foo~ that contains seven numbers, and name its
  elements according to the ~week~.
  #+begin_src R
    foo <- 1:7
    names(foo) <- week
    foo
  #+end_src

- Copy ~week~ to ~workweek~, and remove ~"Saturday" and "Sunday"~ from the
  ~workweek~.
  #+begin_src R
    workweek <- week[1:5] # or week[-(6:7)]
    workweek
  #+end_src

- Copy ~foo~ to ~bar~, and overwrite ~names(bar)~ with ~workweek~.
  #+begin_src R results output
    bar <- foo
    bar
    names(bar) <- workweek
    names(bar[6:7])  # names of the last two elements missing - NA
    names(bar) <- NULL # remove names altogether
    bar
  #+end_src
* Indexing vectors - summary
- Passing a vector of positive numbers returns the slice of the
  vector containing the elements at those locations.
  #+begin_src R
    x <- (1:5)^2   # example vector
    x
    x[1] # extract the first element only
    x[c(1,3,5)] # extract elements with indices 1,3,5
  #+end_src
- Passing a vector of negative numbers returns the slice of the vector
  containing the elements everywhere except at those locations.
  #+begin_src R
    x[c(-2,-4)]
  #+end_src
- Passing a logical vector returns the slice of the vector containing
  the elements where the index is ~TRUE~.
  #+begin_src R
    x[c(TRUE, FALSE, TRUE, FALSE, TRUE)]
  #+end_src
- For named vectors, passing a character vector of names returns the
  slice of the vector containing the elements with those names.
  #+begin_src R
    names(x) <- c("one", "four", "nine", "sixteen", "twenty five")
    x[c("one", "nine", "twenty five")]
  #+end_src
* Coercion - summary
All vector elements have to be of the same ~class~ or type:
~logical~, ~numeric~, or ~character~. What happens when you mix
these? R will make it happen at the price of "coercion". Let's look
at a few examples:

In the first example, ~foo~ contains a missing value, a number and a
character, but the vector is still classified as a ~character~
vector, and the number is converted to a character, because R knows
how to turn ~3~ into ~"3"~, but does not know what number to assign
to a character:
#+begin_src R :session :results output
  (foo <- c("a",NA,1))
  class(foo)
#+end_src
Output:
#+begin_example
: [1] "a" NA  "1"
: [1] "character"
#+end_example

With the ~is.na~ function, we can test for ~NA~ values, and with
~as.character~ and ~is.numeric~ for ~character~ and ~numeric~
values, respectively:
#+begin_src R :session :results output
  is.na(foo)         # check for missing values
  is.character(foo)  # check for character vector
  is.numeric(foo)    # check for numeric vector
#+end_src
Output:
#+begin_example
: [1] FALSE  TRUE FALSE
: [1] TRUE
: [1] FALSE
#+end_example

You can also (try to) explicitly convert the elements using
~as.[class]~: Let's do this one by one to relish the results:
#+begin_src R :session :results output
  as.character(foo) # convert vector to character values
#+end_src
#+begin_example
: [1] "a" NA  "1"
#+end_example
No surprises here. This is the default

Now, force vector to numeric values:
#+begin_src R :session :results output
  as.numeric(foo)  # convert vector to numeric values
#+end_src
#+begin_example
: [1] NA NA  1
: Warning message:
: NAs introduced by coercion
#+end_example
The output contains some surprises! The first element of the
~"character"~ vector is ~"a"~ and cannot be turned into a number,
hence it becomes MIA, and R confesses to "coercion".

And lastly, not to forget logical values:
#+begin_src R :session :results output
  as.logical(foo)   # convert vector to logical values
#+end_src
#+begin_example
: [1] NA NA NA
#+end_example
This may come as a surprise, since we learnt that ~TRUE~ is stored
as ~1~ and ~FALSE~ as ~0~ (remember summing with ~sum~ over a
logical vector?). But the presence of ~NA~ and character ~"a"~
spoils it. The conversion of a vector consisting only of numbers
does however work - sort of. In fact, any non-zero number is
converted into ~TRUE~:
#+begin_src R :session :results output
  as.logical(c(1,0,-1, 0.333, -Inf,NaN ))
#+end_src

#+begin_example
: [1]  TRUE FALSE  TRUE  TRUE  TRUE    NA
...except ~NaN~, but that's not a number, by definition):
#+end_example
I think that's enough evidence for you to stay away from mixing data
types in vectors - though the conversion functions will come in very
handy!
* Summary with examples
- R is a functional language in which everything's an object.
- R functions differ in: performance (speed), ease-of-use and
  clarity.
- To assign values to objects, use the ~<-~ operator.
- To assign values to arguments in functions, use the ~=~ operator.
- The elements of a numeric, character or logical vector are
  numbers, letters or truth values.
- A vector can have arithmetic calculations or vectors as elements.
- A histogram distributes data by frequency across evenly spaced
  bins.
- Sequences of numbers can be created using the colon operator, or
  the functions ~seq~ or ~rep~.
- Vectors can be sorted with ~sort~ in either direction.
- Vector length can be measured as the number of vector elements with ~length~.
- Index vectors can be used to select sub-vectors.
- Negative index values delete the corresponding vector elements

  *R CODE EXAMPLES:*
  | ~x <- 5~                                   | assign ~5~ to object ~x~                      |
  | ~x <- x+1~                                 | overwrite ~x~ (new value)                     |
  | ~c(1,2,3,4)~                               | define (numerical) vector                     |
  | ~class(bar)~                               | check type of object ~bar~                    |
  | ~hist(x,breaks=foo)~                       | histogram of dataset ~x~ with ~foo~ bins      |
  | ~m:n~                                      | sequence ~m~ to ~n~ at intervals ~= 1~        |
  | ~seq(from=foo,to=bar,by=baz)~              | sequence from ~foo~ to ~bar~ intervals ~=baz~ |
  | ~seq(from=foo,to=bar,length.out=fuz)~      | seq. ~foo~ to ~bar~, ~fuz~ equal intervals    |
  | ~rep(x=foo,times=bar,each=baz)~            | repeat ~foo~ times ~bar~, and                 |
  |                                            | repeat each element of ~foo~ times ~baz~      |
  | ~vector("numeric",foo), numeric(foo)~      | empty numeric vector of length ~foo~          |
  | ~vector("character",foo), character(foo)~  | empty numeric vector of length ~foo~          |
  | ~vector("logical",foo), logical(foo)~      | empty numeric vector of length ~foo~          |
  | ~sort(x=foo, decreasing=FALSE)~            | sort vector ~foo~ from smallest to largest    |
  | ~sort(x=foo, decreasing=TRUE)~             | sort vector ~foo~ from largest to smallest    |
  | ~length(x=foo)~                            | print length of vector ~foo~                  |
  | ~[n]~, ~[n:m]~, ~[-n]~                     | indices ~n~, ~n~ to ~m~, deleting element ~n~ |
  | ~prod(foo)~, ~sum(foo)~                    | multiply / sum up all elements of vector foo  |
  | ~names(x)~                                 | return names of vector ~x~ (or ~NULL~)        |
  | ~as.character~, ~as.numeric~, ~as.logical~ | coerce arguments to the resp. class           |

* Concept summary
#+attr_html: :width 400px
[[../img/4_summary.jpg]]

- In R mathematical expressions are evaluated according to the
  /PEMDAS/ rule.

- The natural logarithm $ln(x)$ is the inverse of the exponential
  function e^x.

- In the scientific or e-notation, numbers are expressed as positive
  or negative multiples of 10.

- Each positive or negative multiple shifts the digital point to the
  right or left, respectively.

- Infinity ~Inf~, not-a-number ~NaN~, and not available numbers ~NA~
  are /special values/ in R.

* Code summary

| CODE           | DESCRIPTION                           |
|----------------+---------------------------------------|
| ~log(x=,b=)~     | logarithm of ~x~, base ~b~                |
| ~exp(x)~         | $e^x$, exp[onential] of $x$           |
| ~is.finite(x)~   | tests for finiteness of ~x~             |
| ~is.infinite(x)~ | tests for infiniteness of ~x~           |
| ~is.nan(x)~      | checks if ~x~ is not-a-number           |
| ~is.na(x)~       | checks if ~x~ is not available          |
| ~all.equal(x,y)~ | tests near equality                   |
| ~identical(x,y)~ | tests exact equality                  |
| ~1e2~, ~1e-2~      | $10^{2}=100$, $10^{-2}=\frac{1}{100}$ |

* References

- <<cotton>> Richard Cotton (2013). [[http://duhi23.github.io/Analisis-de-datos/Cotton.pdf][Learning R.]] O'Reilly Media.

- <<davies>> Tilman M. Davies (2016). [[https://nostarch.com/bookofr][The Book of R. (No Starch
  Press).]]

- <<irizarry>> Rafael A. Irizarry (2020). [[https://rafalab.github.io/dsbook/][Introduction to Data Science]]
  (also: CRC Press, 2019).

- <<matloff>> Norman Matloff (2020). [[https://github.com/matloff/fasteR][fasteR: Fast Lane to Learning R!]].
  <<pemdas>>

* Footnotes

[fn:1]Note: If a vector contains different data types, R coerces the
vector elements to conform to one type, as we will see later. A data
type that can hold any type of value is called a ~list~.

[fn:2]The [[https://en.wikipedia.org/wiki/Histogram][Wikipedia entry for "histogram"]] is not bad as a start, lots
of examples and you'll soon find out how to make these yourself! The
origin of the name "histogram" is not clear - it was probably invented
by Pearson, who introduced this type of graph, and is short for
"HISTorical diaGRAM".

[fn:3] Both ~length~ and ~sort~, as you can read in the respective help
pages, work both for vectors and for factors. These are necessary
whenever we deal with qualities or categories (like "male" or
"female") rather than quantities. You'll learn about them soon!

[fn:4] You should look up the examples in ~help(names)~: the data set
~islands~ is a named vector suited to play around with vector naming.

[fn:5] DEFINITION NOT FOUND.

[fn:6] "Arithmetic (from the Greek ἀριθμός arithmos, 'number' and τική
[τέχνη], tiké [téchne], 'art') is a branch of mathematics that
consists of the study of numbers, especially the properties of the
traditional operations on them—addition, subtraction, multiplication,
division, exponentiation and extraction of roots." ([[https://en.wikipedia.org/wiki/Arithmetic][Wikipedia]])

[fn:7] Not just one MOOC, in fact, but a series of nine courses
altogether, with which you can get a professional certificate. These
MOOCs are hosted by [[https://www.edx.org/professional-certificate/harvardx-data-science][edX.org]].

[fn:8] For a while, I had also envisioned that I might use a
block-based, visual programming language like MIT's [[https://scratch.mit.edu/][Scratch]] or its
able cousin from Berkeley U., [[https://snap.berkeley.edu/][Snap!]] OpenSAP offers great [[https://open.sap.com/courses/snap2][(free)
courses]] on Snap! and you can learn all about Scratch online, too.

[fn:9] Fun fact: 'FORTRAN' stands for 'FORmula TRANslator'. A large
part of R's code base is written in FORTRAN, which is the oldest
programming language specifically used for scientific computations
(e.g. it was the first language I learnt at university).

[fn:10] This was mentioned in the "Getting started with R" lesson. To
list all built-in datasets in base-R, enter simply ~data()~. This is
the same function that you use to load a dataset after loading the
respective library (which contains more than one dataset).

[fn:11] Enter ~help(Nile)~, or ~?Nile~. This is one of the more useful
commands. Will only work if the corresponding dataset has been
loaded - for ~Nile~, this is the case.

[fn:12] This page-wise presentation mode with previous|next|up|down
navigation is actually the page-wise [[https://www.emacswiki.org/emacs/InfoMode][(Emacs) ~Info~]] style
presentation.

[fn:13]You know this, too: ~str(Nile)~ for the structure, or
~head(Nile)~ to see the first few (6) elements.
