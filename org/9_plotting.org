#+title: Basic plotting in R
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Introduction to data science (DSC 105) Fall 2022
#+OPTIONS: toc:nil num:nil
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:R :session *R* :exports both :results output
* What are you going to learn?
#+attr_html: :width 600px
[[../img/whiskers.jpg]]

- Why visualization? What does it depend on?
- What types of charts are there?
- Barplots and pie charts
- Histograms
- Box-and-Whisker Plots
- Scatterplots
- Using base R and ggplot2

  This section closely follows the presentation in Davies (2016),
  chapter 14, pp. 289-308.

* When do we visualize data? When don't we?
#+attr_html: :width 600px
[[../img/9_bigpicture.jpg]]
#+begin_quote
Data visualization is important for EXPLORATION and for DOCUMENTATION:

1) During data *exploration* (EDA), we visualize to see *patterns* rather
   than rely on summary statistics and numbers only

2) During data *storytelling*, we document and communicate insights
   using graphs rather than tables (raw numbers)

It's easy to miss *relevant details* in graphs, and it's easy to miss
the *big picture* in tables.
#+end_quote
* What does visualization depend on?
#+attr_html: :width 600px
[[../img/9_viz.png]]
(Source: r-charts.com - base R and ggplot2 examples[fn:1])
#+begin_quote

1) Raw/transformed data (observations and experiments)

2) Available/affordable tools (computing and infrastructure)

3) Variable types/style (related to the programming language)

4) Skill/Benefit (data scientists and data science customers)

#+end_quote
* About lists
[[../img/eatpraylove.jpg]]

- Lists should always be ordered by priority, and aligned by type.

- The poster suggests a priority: eating comes before praying comes
  before loving. Different people have different priorities!

- The following example fails on both categories: the priority order
  is a time order, and it is broken, and the list mixes nouns and
  verbs:
  #+begin_quote
  1) Going home
  2) Go to sleep
  3) Supper
  #+end_quote

- Better:
  #+begin_quote
  1) Going home
  2) Eating supper
  3) Going to sleep
  #+end_quote

* What types of visualizations are there?
#+attr_html: :width 700px
[[../img/9_chart_types.png]]
(Source: r-graph-gallery.com)
#+begin_quote
- Plots with bars (bar plot, histogram, lollipop, dotplot, pie chart)

- Plots with curves (density, ridgeline)

- Plots with points (scatterplot, bubbleplot, correlogram, line plot)

- Plots with areas (mosaicplot, boxplot, violinplot)

- Plots with trees (treemap, dendrogram)
#+end_quote

* Barplots and Pie charts
#+attr_html: :width 400px
[[../img/9_piebar.png]]

- Barplots and pie charts are used to visualize *qualitative* data by
  *category frequency*

- The height of the bars of a *barplot* indicate the frequency or count
  of each category

- The size of the segment of the *pie chart* indicate the frequency or
  count of each category

* Frequency tables

- The frequencies can be computed using the ~table~ function

- Example: look at the dataset ~ToothGrowth~ - it has two ~numeric~ and
  one ~factor~ variable.
  #+begin_src R
    str(ToothGrowth)
    tg <- ToothGrowth
  #+end_src
- Compute the frequencies for the variables of ~ToothGrowth~
  #+begin_src R
    table(tg$len)
    table(tg$supp)
    table(tg$dose)
  #+end_src

- What do these results mean? Which questions does each ~table~ result
  answer?
  #+begin_quote
  How many observations correspond to the values of ~len~, ~supp~ and
  ~dose~?
  #+end_quote

- What kind of R data structure is this frequency table? What
  structure does a table have? Is the table named or unnamed?
  #+begin_src R
    tbl <- table(ToothGrowth$supp)
    class(tbl)
    str(tbl)
    names(tbl)
  #+end_src

* NEXT How to build a barplot
#+attr_html: :width 400px
[[../img/errorbar.png]]

- A barplot draws vertical or horizontal bars separated by white
  space, to visualize frequencies according to the relevant categories

- You can visualize raw quantities (i.e. counts), or functions of
  them, like the ~mean~ or proportions

- For more than one variable, the bars can be stacked or dodged (drawn
  next to one another)

- Example: to build barplots for any variable, we merely pass the
  frequency table to the ~barplot~ function. The value of each table
  entry determines the height of the bar: ~barplot(table(var))~

* Building a barplot for ~mtcars~

- As an example let's use ~mtcars~, which contains characteristics of 32
  classic performance cars in the mid-1970s.

- Print the first 5 rows of the data frame ~mtcars~
  #+begin_src R
    head(mtcars,5)
  #+end_src

- We're only interested in one variable, ~cyl~, the number of cylinders
  of the cars listed.

- We use ~table~ to find out how many cars have how many cylinders and
  store the result in ~cyl.freq~
  #+begin_src R
    cyl.freq <- table(mtcars$cyl)
    cyl.freq
  #+end_src

- We create a barplot of the cylinder frequencies in ~mtcar~
  #+begin_src R :results graphics file :file ../img/9_cyl.png
    barplot(cyl.freq)
  #+end_src

- The plot displays the number of 4-, 6- and 8-cylinder cars in the
  data set but without annotations it's not clear what is summarized

* Annotating a barplot

- Annotating a barplot works no different than annotating any plot,
  which is a great advantage of base R plotting

- The ~barplot~ function has a bunch of parameters, which you can view
  with ~help~ (if you run this in Org-mode, you have to quit with ~C-g~)
  #+begin_src R
    help(barplot)
  #+end_src

- For the simplest annotation, we need:
  1) title
  2) x-axis label
  3) y-axis label

- Customization for the barplot of ~cyl.freq~:
  #+begin_src R :results graphics file :file ../img/9_cyl_ann.png
    barplot(
      height = cyl.freq,
      main = "Barplot of 4-, 5- and 6-cylinder cars in mtcars",
      xlab = "Number of cylinders",
      ylab = "Frequency"
    )
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_ann.png]]

* Practice: building a simple barplot

1) Check the ~help~ for the ~read.csv~ function. What's the difference
   between ~read.csv~ and ~read.csv2~?
   #+begin_quote
   ...
   #+end_quote

2) What is the meaning of the parameter ~stringsAsFactors~?
   #+begin_quote
   ...
   #+end_quote

3) Save the file at https://tinyurl.com/spdnvxbr as a data frame using
   ~read.csv~. Look at the file to check if ~header~ should be ~TRUE~ or
   ~FALSE~, and set ~stringsAsFactors=TRUE~.

   #+begin_src R :results silent

   #+end_src

4) Save the file again as a data frame ~dnf~ but this time do *not* set
   ~stringsAsFactors~ to ~TRUE~. Print the structure of ~dnf~.
   #+begin_src R

   #+end_src

5) Change the ~character~ vectors to ~factor~ vectors in ~dnf~.
   #+begin_src R :results silent

   #+end_src

6) Use a function to check that ~df~ and ~dnf~ are identical.
   #+begin_src R

   #+end_src

6) Check the structure of the data frame ~df~.
   #+begin_src R

   #+end_src

7) Print the data frame.
   #+begin_src R

   #+end_src

8) Compute the frequency table for the variable ~Sex~, store it in
   ~sex.freq~ and print ~sex.freq~.
   #+begin_src R

   #+end_src

9) What information does ~sex.freq~ contain? Write your answer below (as
   a full sentence).
   #+begin_quote
   ...
   #+end_quote

10) Create a barplot for the ~Sex~ category and store it in the file
    ~sex.png~.
    #+begin_src R :results graphics file :file sex.freq.png

    #+end_src

11) Annotate the barplot by adding the title "Barplot of the data set
    df", and x- and y-axis labels. Orient the axis labels horizontally
    by adding the parameter ~las=1~.
    #+begin_src R :results graphics file :file sex.freq_ann.png

    #+end_src

* Building stacked/dodged barplots

- We're interested in cylinder and transmission information: for
  example, how many 4-cylinder cars have automatic transmission?
  #+begin_src R
    table(cylinders[transmission == 0])["4"]
  #+end_src

- /Stacked/ barplots have bars that are split up vertically

- In /dodged/ or /side-by-side/ barplots, the bars are broken up and
  placed next to one another

* Frequency matrix

- To make such plots, ~barplot~ needs a suitably arranged matrix as its
  first argument. E.g. for ~cylinders~ and ~transmissions~, it shows the
  number of all cylinders associated with each transmission type:
  #+begin_src R
    cyl.freq.matrix <- table(transmission, cylinders)
    cyl.freq.matrix
  #+end_src

  #+RESULTS:
  :             cylinders
  : transmission  4  6  8
  :            0  3  4 12
  :            1  8  3  2

- The condition for ~table~ to cross-tabulate categorical variables (or
  vectors of discrete numeric values) is that the vectors have the
  *same length*.

- Column vectors having the same length means that for each
  observation, values of both variables were recorded: each car in
  ~mtcars~ has a ~cylinders~ and a ~transmission~ value.

- Each bar of the barplot corresponds to a column of the supplied
  matrix, and it is further split by the row values.

- Creating the barplot:
  #+begin_src R :results graphics file :file ../img/9_cyl_am.png
    barplot(cyl.freq.matrix,
            las = 1)
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_am.png]]

- Each bar/column of the plot corresponds to a column of the
  categorical variable on the x-axis. Let's customize it!
  
* Customizing barplots

- There are a LOT of potential parameters in ~help(barplot)~ with the
  default values. 
  #+begin_example R
  barplot(height, width = 1, space = NULL,
          names.arg = NULL, legend.text = NULL, beside = FALSE,
          horiz = FALSE, density = NULL, angle = 45,
          col = NULL, border = par("fg"),
          main = NULL, sub = NULL, xlab = NULL, ylab = NULL,
          xlim = NULL, ylim = NULL, xpd = TRUE, log = "",
          axes = TRUE, axisnames = TRUE,
          cex.axis = par("cex.axis"), cex.names = par("cex.axis"),
          inside = TRUE, plot = TRUE, axis.lty = 0, offset = 0,
          add = FALSE, ann = !add && par("ann"),
          args.legend = NULL, ...)
  #+end_example

- Let's look at some of these, which we will customize later:
  
  1) ~height~ is a non-optional argument (vector or matrix)
  2) ~horiz = FALSE~ means bars are drawn vertically (first on the
     left); if ~TRUE~, bars are drawn horizontally (first at bottom)
  3) ~names.arg = NULL~ means that names for each bar are taken from the
     ~names~ attribute of ~height~ if it is a vector, or the column
     names if it is a matrix (which is what happened here):
     #+begin_src R
       colnames(cyl.freq.matrix)
     #+end_src
  4) ~beside = FALSE~ means stacked bars, ~TRUE~ means side-by-side bars
  5) ~legend.text~ is a quick way to add a legend (always useful)
          
  #+RESULTS:
  : [1] "0" "1"

- We already know how to add a title and x- and y-axis labels:
  #+begin_src R :results graphics file :file ../img/9_cyl_am1.png
    barplot(cyl.freq.matrix,
            las = 1,
            main = "Car counts by transmission and cylinders",
            xlab = "Number of cylinders",
            ylab = "Number of cars")
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_am1.png]]

- Change the x-axis names to more meaningful values with ~names.arg~:
  #+begin_src R :results graphics file :file ../img/9_cyl_am2.png
    barplot(cyl.freq.matrix,
            las = 1,
            main = "Car counts by transmission and cylinders",
            xlab = "Transmission type",
            ylab = "Number of cars",
            names.arg = c("V4", "V6", "V8"))
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_am2.png]]

- Add a legend using ~legend.text~:
  #+begin_src R :results graphics file :file ../img/9_cyl_am3.png
    barplot(cyl.freq.matrix,
            las = 1,
            main = "Car counts by transmission and cylinders",
            xlab = "Transmission type",
            ylab = "Number of cars",
            names.arg = c("V4", "V6", "V8"),
            legend.text = c("Auto", "Manual"))
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_am3.png]]

- We don't want the legend to overlap with the bars: we use
  the ~args.legend~ parameter to change the position:
  #+begin_src R :results graphics file :file ../img/9_cyl_am4.png
    barplot(cyl.freq.matrix,
            las = 1,
            main = "Car counts by transmission and cylinders",
            xlab = "Transmission type",
            ylab = "Number of cars",
            names.arg = c("V4", "V6", "V8"),
            legend.text = c("Auto", "Manual"),
            args.legend = list(x="topleft"))
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_am4.png]]

- Turning it on its side changing the parameter ~horiz~ to ~TRUE~ (and
  moving the legend to center ~right~):
  #+begin_src R :results graphics file :file ../img/9_cyl_am5.png
    barplot(cyl.freq.matrix,
            las = 1,
            main = "Car counts by transmission and cylinders",
            xlab = "Transmission type",
            ylab = "Number of cars",
            names.arg = c("V4", "V6", "V8"),
            legend.text = c("Auto", "Manual"),
            args.legend = list(x="right"),
            horiz = TRUE)
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_am5.png]]

- Finally, let's look at the dodged version of this plot:
    #+begin_src R :results graphics file :file ../img/9_cyl_am6.png
      barplot(cyl.freq.matrix,
              las = 1,
              main = "Car counts by transmission and cylinders",
              xlab = "Transmission type",
              ylab = "Number of cars",
              names.arg = c("V4", "V6", "V8"),
              legend.text = c("Auto", "Manual"),
              args.legend = list(x="right"),
              horiz = TRUE,
              beside = TRUE)
  #+end_src

  #+RESULTS:
  [[file:../img/9_cyl_am6.png]]

- Especially for stacked plots, it might be good to see the values
  attached to the bars. There is no parameter to do this, we must use
  ~text~: the ~labels~ inside the function use the ~numeric~ values and
  convert them to ~character~ values for printing.
  
* Footnotes

[fn:1]What are the categories used to organize the graphs?
Distribution, correlation and evolution (aka growth) relate to
statistical summaries. Spatial relates to an application, and the last
ones are qualitative characteristics related to patterns (part/whole),
order (ranking) and time (flow), showing special types of graphs (pie
chart, spider graph and line graph). The "Miscellaneous" category is
filled with fun examples, too.
